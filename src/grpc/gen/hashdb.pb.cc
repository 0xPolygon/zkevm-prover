// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hashdb.proto

#include "hashdb.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace hashdb {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v0_0_1_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetRequest::SetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.old_root_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.persistent_)*/ false

  , /*decltype(_impl_.details_)*/ false

  , /*decltype(_impl_.get_db_read_log_)*/ false
} {}
struct SetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRequestDefaultTypeInternal() {}
  union {
    SetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRequestDefaultTypeInternal _SetRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetRequest::GetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.root_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.details_)*/ false

  , /*decltype(_impl_.get_db_read_log_)*/ false
} {}
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetProgramRequest::SetProgramRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.persistent_)*/ false
} {}
struct SetProgramRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProgramRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProgramRequestDefaultTypeInternal() {}
  union {
    SetProgramRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProgramRequestDefaultTypeInternal _SetProgramRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetProgramRequest::GetProgramRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr} {}
struct GetProgramRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetProgramRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetProgramRequestDefaultTypeInternal() {}
  union {
    GetProgramRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetProgramRequestDefaultTypeInternal _GetProgramRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LoadDBRequest_InputDbEntry_DoNotUse::LoadDBRequest_InputDbEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LoadDBRequest_InputDbEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadDBRequest_InputDbEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadDBRequest_InputDbEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LoadDBRequest_InputDbEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadDBRequest_InputDbEntry_DoNotUseDefaultTypeInternal _LoadDBRequest_InputDbEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LoadDBRequest::LoadDBRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_db_)*/{}
  , /*decltype(_impl_.persistent_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadDBRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadDBRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadDBRequestDefaultTypeInternal() {}
  union {
    LoadDBRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadDBRequestDefaultTypeInternal _LoadDBRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LoadProgramDBRequest_InputProgramDbEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadProgramDBRequest_InputProgramDbEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadProgramDBRequest_InputProgramDbEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LoadProgramDBRequest_InputProgramDbEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadProgramDBRequest_InputProgramDbEntry_DoNotUseDefaultTypeInternal _LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LoadProgramDBRequest::LoadProgramDBRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_program_db_)*/{}
  , /*decltype(_impl_.persistent_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadProgramDBRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadProgramDBRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadProgramDBRequestDefaultTypeInternal() {}
  union {
    LoadProgramDBRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadProgramDBRequestDefaultTypeInternal _LoadProgramDBRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFlushDataRequest::GetFlushDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flush_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushDataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushDataRequestDefaultTypeInternal() {}
  union {
    GetFlushDataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushDataRequestDefaultTypeInternal _GetFlushDataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetResponse_SiblingsEntry_DoNotUse::SetResponse_SiblingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetResponse_SiblingsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal _SetResponse_SiblingsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetResponse_DbReadLogEntry_DoNotUse::SetResponse_DbReadLogEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetResponse_DbReadLogEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal _SetResponse_DbReadLogEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetResponse::SetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.siblings_)*/{}
  , /*decltype(_impl_.db_read_log_)*/{}
  , /*decltype(_impl_.ins_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.old_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.old_root_)*/nullptr
  , /*decltype(_impl_.new_root_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.ins_key_)*/nullptr
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.proof_hash_counter_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_old0_)*/ false
} {}
struct SetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetResponseDefaultTypeInternal() {}
  union {
    SetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetResponseDefaultTypeInternal _SetResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetResponse_SiblingsEntry_DoNotUse::GetResponse_SiblingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetResponse_SiblingsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal _GetResponse_SiblingsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetResponse_DbReadLogEntry_DoNotUse::GetResponse_DbReadLogEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetResponse_DbReadLogEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal _GetResponse_DbReadLogEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetResponse::GetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.siblings_)*/{}
  , /*decltype(_impl_.db_read_log_)*/{}
  , /*decltype(_impl_.ins_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.ins_key_)*/nullptr
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.proof_hash_counter_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_old0_)*/ false
} {}
struct GetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseDefaultTypeInternal _GetResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetProgramResponse::SetProgramResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr} {}
struct SetProgramResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProgramResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProgramResponseDefaultTypeInternal() {}
  union {
    SetProgramResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProgramResponseDefaultTypeInternal _SetProgramResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetProgramResponse::GetProgramResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.result_)*/nullptr} {}
struct GetProgramResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetProgramResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetProgramResponseDefaultTypeInternal() {}
  union {
    GetProgramResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetProgramResponseDefaultTypeInternal _GetProgramResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlushResponse::FlushResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.flush_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.stored_flush_id_)*/ ::uint64_t{0u}
} {}
struct FlushResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponseDefaultTypeInternal() {}
  union {
    FlushResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFlushStatusResponse::GetFlushStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prover_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.stored_flush_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.storing_flush_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_flush_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pending_to_flush_nodes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pending_to_flush_program_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.storing_nodes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.storing_program_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushStatusResponseDefaultTypeInternal() {}
  union {
    GetFlushStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushStatusResponseDefaultTypeInternal _GetFlushStatusResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFlushDataResponse_NodesEntry_DoNotUse::GetFlushDataResponse_NodesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetFlushDataResponse_NodesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushDataResponse_NodesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushDataResponse_NodesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetFlushDataResponse_NodesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushDataResponse_NodesEntry_DoNotUseDefaultTypeInternal _GetFlushDataResponse_NodesEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFlushDataResponse_ProgramEntry_DoNotUse::GetFlushDataResponse_ProgramEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetFlushDataResponse_ProgramEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushDataResponse_ProgramEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushDataResponse_ProgramEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetFlushDataResponse_ProgramEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushDataResponse_ProgramEntry_DoNotUseDefaultTypeInternal _GetFlushDataResponse_ProgramEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFlushDataResponse::GetFlushDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.program_)*/{}
  , /*decltype(_impl_.nodes_state_root_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.stored_flush_id_)*/ ::uint64_t{0u}
} {}
struct GetFlushDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushDataResponseDefaultTypeInternal() {}
  union {
    GetFlushDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushDataResponseDefaultTypeInternal _GetFlushDataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Fea::Fea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fe0_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.fe1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.fe2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.fe3_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaDefaultTypeInternal() {}
  union {
    Fea _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaDefaultTypeInternal _Fea_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeList::FeList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fe_)*/ {}
  ,/* _impl_._fe_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeListDefaultTypeInternal() {}
  union {
    FeList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeListDefaultTypeInternal _FeList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiblingList::SiblingList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sibling_)*/ {}
  ,/* _impl_._sibling_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiblingListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiblingListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiblingListDefaultTypeInternal() {}
  union {
    SiblingList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiblingListDefaultTypeInternal _SiblingList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ResultCode::ResultCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultCodeDefaultTypeInternal() {}
  union {
    ResultCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace v1
}  // namespace hashdb
static ::_pb::Metadata file_level_metadata_hashdb_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_hashdb_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hashdb_2eproto = nullptr;
const ::uint32_t TableStruct_hashdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Version, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Version, _impl_.v0_0_1_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_.old_root_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_.persistent_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_.details_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetRequest, _impl_.get_db_read_log_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetRequest, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetRequest, _impl_.details_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetRequest, _impl_.get_db_read_log_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramRequest, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramRequest, _impl_.persistent_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramRequest, _impl_.key_),
    0,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest, _impl_.input_db_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadDBRequest, _impl_.persistent_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest, _impl_.input_program_db_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::LoadProgramDBRequest, _impl_.persistent_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataRequest, _impl_.flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.old_root_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.new_root_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.siblings_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.ins_key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.ins_value_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.is_old0_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.old_value_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.new_value_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.proof_hash_counter_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.db_read_log_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetResponse, _impl_.result_),
    0,
    1,
    2,
    ~0u,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    4,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.siblings_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.ins_key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.ins_value_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.is_old0_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.proof_hash_counter_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.db_read_log_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetResponse, _impl_.result_),
    0,
    1,
    ~0u,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    3,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SetProgramResponse, _impl_.result_),
    0,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetProgramResponse, _impl_.result_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FlushResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FlushResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FlushResponse, _impl_.flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FlushResponse, _impl_.stored_flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FlushResponse, _impl_.result_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.stored_flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.storing_flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.last_flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.pending_to_flush_nodes_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.pending_to_flush_program_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.storing_nodes_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.storing_program_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushStatusResponse, _impl_.prover_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _impl_.stored_flush_id_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _impl_.nodes_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _impl_.program_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _impl_.nodes_state_root_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::GetFlushDataResponse, _impl_.result_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Fea, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Fea, _impl_.fe0_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Fea, _impl_.fe1_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Fea, _impl_.fe2_),
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::Fea, _impl_.fe3_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FeList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::FeList, _impl_.fe_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SiblingList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::SiblingList, _impl_.sibling_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::ResultCode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hashdb::v1::ResultCode, _impl_.code_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::hashdb::v1::Version)},
        { 9, 23, -1, sizeof(::hashdb::v1::SetRequest)},
        { 29, 41, -1, sizeof(::hashdb::v1::GetRequest)},
        { 45, 56, -1, sizeof(::hashdb::v1::SetProgramRequest)},
        { 59, 68, -1, sizeof(::hashdb::v1::GetProgramRequest)},
        { 69, 79, -1, sizeof(::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse)},
        { 81, -1, -1, sizeof(::hashdb::v1::LoadDBRequest)},
        { 91, 101, -1, sizeof(::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse)},
        { 103, -1, -1, sizeof(::hashdb::v1::LoadProgramDBRequest)},
        { 113, -1, -1, sizeof(::hashdb::v1::GetFlushDataRequest)},
        { 122, 132, -1, sizeof(::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse)},
        { 134, 144, -1, sizeof(::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse)},
        { 146, 167, -1, sizeof(::hashdb::v1::SetResponse)},
        { 180, 190, -1, sizeof(::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse)},
        { 192, 202, -1, sizeof(::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse)},
        { 204, 222, -1, sizeof(::hashdb::v1::GetResponse)},
        { 232, 241, -1, sizeof(::hashdb::v1::SetProgramResponse)},
        { 242, 252, -1, sizeof(::hashdb::v1::GetProgramResponse)},
        { 254, 265, -1, sizeof(::hashdb::v1::FlushResponse)},
        { 268, -1, -1, sizeof(::hashdb::v1::GetFlushStatusResponse)},
        { 284, 294, -1, sizeof(::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse)},
        { 296, 306, -1, sizeof(::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse)},
        { 308, 321, -1, sizeof(::hashdb::v1::GetFlushDataResponse)},
        { 326, -1, -1, sizeof(::hashdb::v1::Fea)},
        { 338, -1, -1, sizeof(::hashdb::v1::FeList)},
        { 347, -1, -1, sizeof(::hashdb::v1::SiblingList)},
        { 356, -1, -1, sizeof(::hashdb::v1::ResultCode)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hashdb::v1::_Version_default_instance_._instance,
    &::hashdb::v1::_SetRequest_default_instance_._instance,
    &::hashdb::v1::_GetRequest_default_instance_._instance,
    &::hashdb::v1::_SetProgramRequest_default_instance_._instance,
    &::hashdb::v1::_GetProgramRequest_default_instance_._instance,
    &::hashdb::v1::_LoadDBRequest_InputDbEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_LoadDBRequest_default_instance_._instance,
    &::hashdb::v1::_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_LoadProgramDBRequest_default_instance_._instance,
    &::hashdb::v1::_GetFlushDataRequest_default_instance_._instance,
    &::hashdb::v1::_SetResponse_SiblingsEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_SetResponse_DbReadLogEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_SetResponse_default_instance_._instance,
    &::hashdb::v1::_GetResponse_SiblingsEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_GetResponse_DbReadLogEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_GetResponse_default_instance_._instance,
    &::hashdb::v1::_SetProgramResponse_default_instance_._instance,
    &::hashdb::v1::_GetProgramResponse_default_instance_._instance,
    &::hashdb::v1::_FlushResponse_default_instance_._instance,
    &::hashdb::v1::_GetFlushStatusResponse_default_instance_._instance,
    &::hashdb::v1::_GetFlushDataResponse_NodesEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_GetFlushDataResponse_ProgramEntry_DoNotUse_default_instance_._instance,
    &::hashdb::v1::_GetFlushDataResponse_default_instance_._instance,
    &::hashdb::v1::_Fea_default_instance_._instance,
    &::hashdb::v1::_FeList_default_instance_._instance,
    &::hashdb::v1::_SiblingList_default_instance_._instance,
    &::hashdb::v1::_ResultCode_default_instance_._instance,
};
const char descriptor_table_protodef_hashdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014hashdb.proto\022\thashdb.v1\032\033google/protob"
    "uf/empty.proto\"\031\n\007Version\022\016\n\006v0_0_1\030\001 \001("
    "\t\"\230\001\n\nSetRequest\022 \n\010old_root\030\001 \001(\0132\016.has"
    "hdb.v1.Fea\022\033\n\003key\030\002 \001(\0132\016.hashdb.v1.Fea\022"
    "\r\n\005value\030\003 \001(\t\022\022\n\npersistent\030\004 \001(\010\022\017\n\007de"
    "tails\030\005 \001(\010\022\027\n\017get_db_read_log\030\006 \001(\010\"q\n\n"
    "GetRequest\022\034\n\004root\030\001 \001(\0132\016.hashdb.v1.Fea"
    "\022\033\n\003key\030\002 \001(\0132\016.hashdb.v1.Fea\022\017\n\007details"
    "\030\003 \001(\010\022\027\n\017get_db_read_log\030\004 \001(\010\"R\n\021SetPr"
    "ogramRequest\022\033\n\003key\030\001 \001(\0132\016.hashdb.v1.Fe"
    "a\022\014\n\004data\030\002 \001(\014\022\022\n\npersistent\030\003 \001(\010\"0\n\021G"
    "etProgramRequest\022\033\n\003key\030\001 \001(\0132\016.hashdb.v"
    "1.Fea\"\237\001\n\rLoadDBRequest\0227\n\010input_db\030\001 \003("
    "\0132%.hashdb.v1.LoadDBRequest.InputDbEntry"
    "\022\022\n\npersistent\030\002 \001(\010\032A\n\014InputDbEntry\022\013\n\003"
    "key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.hashdb.v1.FeL"
    "ist:\0028\001\"\260\001\n\024LoadProgramDBRequest\022M\n\020inpu"
    "t_program_db\030\001 \003(\01323.hashdb.v1.LoadProgr"
    "amDBRequest.InputProgramDbEntry\022\022\n\npersi"
    "stent\030\002 \001(\010\0325\n\023InputProgramDbEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\'\n\023GetFlushDa"
    "taRequest\022\020\n\010flush_id\030\001 \001(\004\"\254\004\n\013SetRespo"
    "nse\022 \n\010old_root\030\001 \001(\0132\016.hashdb.v1.Fea\022 \n"
    "\010new_root\030\002 \001(\0132\016.hashdb.v1.Fea\022\033\n\003key\030\003"
    " \001(\0132\016.hashdb.v1.Fea\0226\n\010siblings\030\004 \003(\0132$"
    ".hashdb.v1.SetResponse.SiblingsEntry\022\037\n\007"
    "ins_key\030\005 \001(\0132\016.hashdb.v1.Fea\022\021\n\tins_val"
    "ue\030\006 \001(\t\022\017\n\007is_old0\030\007 \001(\010\022\021\n\told_value\030\010"
    " \001(\t\022\021\n\tnew_value\030\t \001(\t\022\014\n\004mode\030\n \001(\t\022\032\n"
    "\022proof_hash_counter\030\013 \001(\004\022:\n\013db_read_log"
    "\030\014 \003(\0132%.hashdb.v1.SetResponse.DbReadLog"
    "Entry\022%\n\006result\030\r \001(\0132\025.hashdb.v1.Result"
    "Code\032G\n\rSiblingsEntry\022\013\n\003key\030\001 \001(\004\022%\n\005va"
    "lue\030\002 \001(\0132\026.hashdb.v1.SiblingList:\0028\001\032C\n"
    "\016DbReadLogEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 "
    "\001(\0132\021.hashdb.v1.FeList:\0028\001\"\341\003\n\013GetRespon"
    "se\022\034\n\004root\030\001 \001(\0132\016.hashdb.v1.Fea\022\033\n\003key\030"
    "\002 \001(\0132\016.hashdb.v1.Fea\0226\n\010siblings\030\003 \003(\0132"
    "$.hashdb.v1.GetResponse.SiblingsEntry\022\037\n"
    "\007ins_key\030\004 \001(\0132\016.hashdb.v1.Fea\022\021\n\tins_va"
    "lue\030\005 \001(\t\022\017\n\007is_old0\030\006 \001(\010\022\r\n\005value\030\007 \001("
    "\t\022\032\n\022proof_hash_counter\030\010 \001(\004\022:\n\013db_read"
    "_log\030\t \003(\0132%.hashdb.v1.GetResponse.DbRea"
    "dLogEntry\022%\n\006result\030\n \001(\0132\025.hashdb.v1.Re"
    "sultCode\032G\n\rSiblingsEntry\022\013\n\003key\030\001 \001(\004\022%"
    "\n\005value\030\002 \001(\0132\026.hashdb.v1.SiblingList:\0028"
    "\001\032C\n\016DbReadLogEntry\022\013\n\003key\030\001 \001(\t\022 \n\005valu"
    "e\030\002 \001(\0132\021.hashdb.v1.FeList:\0028\001\";\n\022SetPro"
    "gramResponse\022%\n\006result\030\001 \001(\0132\025.hashdb.v1"
    ".ResultCode\"I\n\022GetProgramResponse\022\014\n\004dat"
    "a\030\001 \001(\014\022%\n\006result\030\002 \001(\0132\025.hashdb.v1.Resu"
    "ltCode\"a\n\rFlushResponse\022\020\n\010flush_id\030\001 \001("
    "\004\022\027\n\017stored_flush_id\030\002 \001(\004\022%\n\006result\030\003 \001"
    "(\0132\025.hashdb.v1.ResultCode\"\347\001\n\026GetFlushSt"
    "atusResponse\022\027\n\017stored_flush_id\030\001 \001(\004\022\030\n"
    "\020storing_flush_id\030\002 \001(\004\022\025\n\rlast_flush_id"
    "\030\003 \001(\004\022\036\n\026pending_to_flush_nodes\030\004 \001(\004\022 "
    "\n\030pending_to_flush_program\030\005 \001(\004\022\025\n\rstor"
    "ing_nodes\030\006 \001(\004\022\027\n\017storing_program\030\007 \001(\004"
    "\022\021\n\tprover_id\030\010 \001(\t\"\310\002\n\024GetFlushDataResp"
    "onse\022\027\n\017stored_flush_id\030\001 \001(\004\0229\n\005nodes\030\002"
    " \003(\0132*.hashdb.v1.GetFlushDataResponse.No"
    "desEntry\022=\n\007program\030\003 \003(\0132,.hashdb.v1.Ge"
    "tFlushDataResponse.ProgramEntry\022\030\n\020nodes"
    "_state_root\030\004 \001(\t\022%\n\006result\030\005 \001(\0132\025.hash"
    "db.v1.ResultCode\032,\n\nNodesEntry\022\013\n\003key\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032.\n\014ProgramEntry\022\013"
    "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"9\n\003Fea\022\013\n"
    "\003fe0\030\001 \001(\004\022\013\n\003fe1\030\002 \001(\004\022\013\n\003fe2\030\003 \001(\004\022\013\n\003"
    "fe3\030\004 \001(\004\"\024\n\006FeList\022\n\n\002fe\030\001 \003(\004\"\036\n\013Sibli"
    "ngList\022\017\n\007sibling\030\001 \003(\004\"\316\001\n\nResultCode\022("
    "\n\004code\030\001 \001(\0162\032.hashdb.v1.ResultCode.Code"
    "\"\225\001\n\004Code\022\024\n\020CODE_UNSPECIFIED\020\000\022\020\n\014CODE_"
    "SUCCESS\020\001\022\031\n\025CODE_DB_KEY_NOT_FOUND\020\002\022\021\n\r"
    "CODE_DB_ERROR\020\003\022\027\n\023CODE_INTERNAL_ERROR\020\004"
    "\022\036\n\032CODE_SMT_INVALID_DATA_SIZE\020\0162\301\005\n\rHas"
    "hDBService\0226\n\003Set\022\025.hashdb.v1.SetRequest"
    "\032\026.hashdb.v1.SetResponse\"\000\0226\n\003Get\022\025.hash"
    "db.v1.GetRequest\032\026.hashdb.v1.GetResponse"
    "\"\000\022K\n\nSetProgram\022\034.hashdb.v1.SetProgramR"
    "equest\032\035.hashdb.v1.SetProgramResponse\"\000\022"
    "K\n\nGetProgram\022\034.hashdb.v1.GetProgramRequ"
    "est\032\035.hashdb.v1.GetProgramResponse\"\000\022<\n\006"
    "LoadDB\022\030.hashdb.v1.LoadDBRequest\032\026.googl"
    "e.protobuf.Empty\"\000\022J\n\rLoadProgramDB\022\037.ha"
    "shdb.v1.LoadProgramDBRequest\032\026.google.pr"
    "otobuf.Empty\"\000\022;\n\005Flush\022\026.google.protobu"
    "f.Empty\032\030.hashdb.v1.FlushResponse\"\000\022=\n\tS"
    "emiFlush\022\026.google.protobuf.Empty\032\026.googl"
    "e.protobuf.Empty\"\000\022M\n\016GetFlushStatus\022\026.g"
    "oogle.protobuf.Empty\032!.hashdb.v1.GetFlus"
    "hStatusResponse\"\000\022Q\n\014GetFlushData\022\036.hash"
    "db.v1.GetFlushDataRequest\032\037.hashdb.v1.Ge"
    "tFlushDataResponse\"\000B5Z3github.com/0xPol"
    "ygonHermez/zkevm-node/merkletree/pbb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_hashdb_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_hashdb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hashdb_2eproto = {
    false,
    false,
    3803,
    descriptor_table_protodef_hashdb_2eproto,
    "hashdb.proto",
    &descriptor_table_hashdb_2eproto_once,
    descriptor_table_hashdb_2eproto_deps,
    1,
    27,
    schemas,
    file_default_instances,
    TableStruct_hashdb_2eproto::offsets,
    file_level_metadata_hashdb_2eproto,
    file_level_enum_descriptors_hashdb_2eproto,
    file_level_service_descriptors_hashdb_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hashdb_2eproto_getter() {
  return &descriptor_table_hashdb_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hashdb_2eproto(&descriptor_table_hashdb_2eproto);
namespace hashdb {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hashdb_2eproto);
  return file_level_enum_descriptors_hashdb_2eproto[0];
}
bool ResultCode_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 14:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ResultCode_Code ResultCode::CODE_UNSPECIFIED;
constexpr ResultCode_Code ResultCode::CODE_SUCCESS;
constexpr ResultCode_Code ResultCode::CODE_DB_KEY_NOT_FOUND;
constexpr ResultCode_Code ResultCode::CODE_DB_ERROR;
constexpr ResultCode_Code ResultCode::CODE_INTERNAL_ERROR;
constexpr ResultCode_Code ResultCode::CODE_SMT_INVALID_DATA_SIZE;
constexpr ResultCode_Code ResultCode::Code_MIN;
constexpr ResultCode_Code ResultCode::Code_MAX;
constexpr int ResultCode::Code_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_0_1_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.v0_0_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.v0_0_1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v0_0_1().empty()) {
    _this->_impl_.v0_0_1_.Set(from._internal_v0_0_1(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.Version)
}

inline void Version::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_0_1_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.v0_0_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.v0_0_1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:hashdb.v1.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v0_0_1_.Destroy();
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.Version)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v0_0_1_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string v0_0_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_v0_0_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.Version.v0_0_1"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Version::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.Version)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (!this->_internal_v0_0_1().empty()) {
    const std::string& _s = this->_internal_v0_0_1();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.Version.v0_0_1");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.Version)
  return target;
}

::size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.Version)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (!this->_internal_v0_0_1().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_v0_0_1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.Version)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_v0_0_1().empty()) {
    _this->_internal_set_v0_0_1(from._internal_v0_0_1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.v0_0_1_, lhs_arena,
                                       &other->_impl_.v0_0_1_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[0]);
}
// ===================================================================

class SetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRequest, _impl_._has_bits_);
  static const ::hashdb::v1::Fea& old_root(const SetRequest* msg);
  static void set_has_old_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hashdb::v1::Fea& key(const SetRequest* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hashdb::v1::Fea&
SetRequest::_Internal::old_root(const SetRequest* msg) {
  return *msg->_impl_.old_root_;
}
const ::hashdb::v1::Fea&
SetRequest::_Internal::key(const SetRequest* msg) {
  return *msg->_impl_.key_;
}
SetRequest::SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.SetRequest)
}
SetRequest::SetRequest(const SetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.old_root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.persistent_) {}

    , decltype(_impl_.details_) {}

    , decltype(_impl_.get_db_read_log_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.old_root_ = new ::hashdb::v1::Fea(*from._impl_.old_root_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.key_ = new ::hashdb::v1::Fea(*from._impl_.key_);
  }
  ::memcpy(&_impl_.persistent_, &from._impl_.persistent_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.get_db_read_log_) -
    reinterpret_cast<char*>(&_impl_.persistent_)) + sizeof(_impl_.get_db_read_log_));
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.SetRequest)
}

inline void SetRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.old_root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.persistent_) { false }

    , decltype(_impl_.details_) { false }

    , decltype(_impl_.get_db_read_log_) { false }

  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.SetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.old_root_;
  if (this != internal_default_instance()) delete _impl_.key_;
}

void SetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.SetRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.old_root_ != nullptr);
      _impl_.old_root_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
  }
  ::memset(&_impl_.persistent_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.get_db_read_log_) -
      reinterpret_cast<char*>(&_impl_.persistent_)) + sizeof(_impl_.get_db_read_log_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.Fea old_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.SetRequest.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool persistent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool get_db_read_log = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.get_db_read_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.SetRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.Fea old_root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::old_root(this),
        _Internal::old_root(this).GetCachedSize(), target, stream);
  }

  // .hashdb.v1.Fea key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.SetRequest.value");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool persistent = 4;
  if (this->_internal_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_persistent(), target);
  }

  // bool details = 5;
  if (this->_internal_details() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_details(), target);
  }

  // bool get_db_read_log = 6;
  if (this->_internal_get_db_read_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_get_db_read_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.SetRequest)
  return target;
}

::size_t SetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.SetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .hashdb.v1.Fea old_root = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_root_);
    }

    // .hashdb.v1.Fea key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

  }
  // bool persistent = 4;
  if (this->_internal_persistent() != 0) {
    total_size += 2;
  }

  // bool details = 5;
  if (this->_internal_details() != 0) {
    total_size += 2;
  }

  // bool get_db_read_log = 6;
  if (this->_internal_get_db_read_log() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRequest::GetClassData() const { return &_class_data_; }


void SetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetRequest*>(&to_msg);
  auto& from = static_cast<const SetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.SetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_old_root()->::hashdb::v1::Fea::MergeFrom(
          from._internal_old_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key()->::hashdb::v1::Fea::MergeFrom(
          from._internal_key());
    }
  }
  if (from._internal_persistent() != 0) {
    _this->_internal_set_persistent(from._internal_persistent());
  }
  if (from._internal_details() != 0) {
    _this->_internal_set_details(from._internal_details());
  }
  if (from._internal_get_db_read_log() != 0) {
    _this->_internal_set_get_db_read_log(from._internal_get_db_read_log());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRequest::IsInitialized() const {
  return true;
}

void SetRequest::InternalSwap(SetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRequest, _impl_.get_db_read_log_)
      + sizeof(SetRequest::_impl_.get_db_read_log_)
      - PROTOBUF_FIELD_OFFSET(SetRequest, _impl_.old_root_)>(
          reinterpret_cast<char*>(&_impl_.old_root_),
          reinterpret_cast<char*>(&other->_impl_.old_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[1]);
}
// ===================================================================

class GetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetRequest, _impl_._has_bits_);
  static const ::hashdb::v1::Fea& root(const GetRequest* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hashdb::v1::Fea& key(const GetRequest* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hashdb::v1::Fea&
GetRequest::_Internal::root(const GetRequest* msg) {
  return *msg->_impl_.root_;
}
const ::hashdb::v1::Fea&
GetRequest::_Internal::key(const GetRequest* msg) {
  return *msg->_impl_.key_;
}
GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.details_) {}

    , decltype(_impl_.get_db_read_log_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.root_ = new ::hashdb::v1::Fea(*from._impl_.root_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.key_ = new ::hashdb::v1::Fea(*from._impl_.key_);
  }
  ::memcpy(&_impl_.details_, &from._impl_.details_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.get_db_read_log_) -
    reinterpret_cast<char*>(&_impl_.details_)) + sizeof(_impl_.get_db_read_log_));
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetRequest)
}

inline void GetRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.details_) { false }

    , decltype(_impl_.get_db_read_log_) { false }

  };
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.root_;
  if (this != internal_default_instance()) delete _impl_.key_;
}

void GetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.root_ != nullptr);
      _impl_.root_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
  }
  ::memset(&_impl_.details_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.get_db_read_log_) -
      reinterpret_cast<char*>(&_impl_.details_)) + sizeof(_impl_.get_db_read_log_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.Fea root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool get_db_read_log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.get_db_read_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.Fea root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  // .hashdb.v1.Fea key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // bool details = 3;
  if (this->_internal_details() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_details(), target);
  }

  // bool get_db_read_log = 4;
  if (this->_internal_get_db_read_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_get_db_read_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetRequest)
  return target;
}

::size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .hashdb.v1.Fea root = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.root_);
    }

    // .hashdb.v1.Fea key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

  }
  // bool details = 3;
  if (this->_internal_details() != 0) {
    total_size += 2;
  }

  // bool get_db_read_log = 4;
  if (this->_internal_get_db_read_log() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }


void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRequest*>(&to_msg);
  auto& from = static_cast<const GetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_root()->::hashdb::v1::Fea::MergeFrom(
          from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key()->::hashdb::v1::Fea::MergeFrom(
          from._internal_key());
    }
  }
  if (from._internal_details() != 0) {
    _this->_internal_set_details(from._internal_details());
  }
  if (from._internal_get_db_read_log() != 0) {
    _this->_internal_set_get_db_read_log(from._internal_get_db_read_log());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, _impl_.get_db_read_log_)
      + sizeof(GetRequest::_impl_.get_db_read_log_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[2]);
}
// ===================================================================

class SetProgramRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetProgramRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetProgramRequest, _impl_._has_bits_);
  static const ::hashdb::v1::Fea& key(const SetProgramRequest* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hashdb::v1::Fea&
SetProgramRequest::_Internal::key(const SetProgramRequest* msg) {
  return *msg->_impl_.key_;
}
SetProgramRequest::SetProgramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.SetProgramRequest)
}
SetProgramRequest::SetProgramRequest(const SetProgramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetProgramRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.persistent_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_ = new ::hashdb::v1::Fea(*from._impl_.key_);
  }
  _this->_impl_.persistent_ = from._impl_.persistent_;
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.SetProgramRequest)
}

inline void SetProgramRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.persistent_) { false }

  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetProgramRequest::~SetProgramRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.SetProgramRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetProgramRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
}

void SetProgramRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetProgramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.SetProgramRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_.persistent_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProgramRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.Fea key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool persistent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetProgramRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.SetProgramRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.Fea key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bool persistent = 3;
  if (this->_internal_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.SetProgramRequest)
  return target;
}

::size_t SetProgramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.SetProgramRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .hashdb.v1.Fea key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // bool persistent = 3;
  if (this->_internal_persistent() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProgramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetProgramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProgramRequest::GetClassData() const { return &_class_data_; }


void SetProgramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetProgramRequest*>(&to_msg);
  auto& from = static_cast<const SetProgramRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.SetProgramRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_key()->::hashdb::v1::Fea::MergeFrom(
        from._internal_key());
  }
  if (from._internal_persistent() != 0) {
    _this->_internal_set_persistent(from._internal_persistent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProgramRequest::CopyFrom(const SetProgramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.SetProgramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProgramRequest::IsInitialized() const {
  return true;
}

void SetProgramRequest::InternalSwap(SetProgramRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetProgramRequest, _impl_.persistent_)
      + sizeof(SetProgramRequest::_impl_.persistent_)
      - PROTOBUF_FIELD_OFFSET(SetProgramRequest, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProgramRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[3]);
}
// ===================================================================

class GetProgramRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProgramRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetProgramRequest, _impl_._has_bits_);
  static const ::hashdb::v1::Fea& key(const GetProgramRequest* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hashdb::v1::Fea&
GetProgramRequest::_Internal::key(const GetProgramRequest* msg) {
  return *msg->_impl_.key_;
}
GetProgramRequest::GetProgramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetProgramRequest)
}
GetProgramRequest::GetProgramRequest(const GetProgramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetProgramRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_ = new ::hashdb::v1::Fea(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetProgramRequest)
}

inline void GetProgramRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
  };
}

GetProgramRequest::~GetProgramRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetProgramRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetProgramRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void GetProgramRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetProgramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetProgramRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProgramRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.Fea key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetProgramRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetProgramRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.Fea key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetProgramRequest)
  return target;
}

::size_t GetProgramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetProgramRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hashdb.v1.Fea key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProgramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetProgramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProgramRequest::GetClassData() const { return &_class_data_; }


void GetProgramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetProgramRequest*>(&to_msg);
  auto& from = static_cast<const GetProgramRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetProgramRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_key()->::hashdb::v1::Fea::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProgramRequest::CopyFrom(const GetProgramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetProgramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgramRequest::IsInitialized() const {
  return true;
}

void GetProgramRequest::InternalSwap(GetProgramRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProgramRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[4]);
}
// ===================================================================

LoadDBRequest_InputDbEntry_DoNotUse::LoadDBRequest_InputDbEntry_DoNotUse() {}
LoadDBRequest_InputDbEntry_DoNotUse::LoadDBRequest_InputDbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadDBRequest_InputDbEntry_DoNotUse::MergeFrom(const LoadDBRequest_InputDbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadDBRequest_InputDbEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[5]);
}
// ===================================================================

class LoadDBRequest::_Internal {
 public:
};

LoadDBRequest::LoadDBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.LoadDBRequest)
}
LoadDBRequest::LoadDBRequest(const LoadDBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadDBRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.input_db_)*/{}
    , decltype(_impl_.persistent_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.input_db_.MergeFrom(from._impl_.input_db_);
  _this->_impl_.persistent_ = from._impl_.persistent_;
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.LoadDBRequest)
}

inline void LoadDBRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.input_db_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.persistent_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoadDBRequest::~LoadDBRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.LoadDBRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadDBRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_db_.~MapField();
}

void LoadDBRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.LoadDBRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_db_.Clear();
  _impl_.persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadDBRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .hashdb.v1.FeList> input_db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.input_db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool persistent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoadDBRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.LoadDBRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .hashdb.v1.FeList> input_db = 1;
  if (!this->_internal_input_db().empty()) {
    using MapType = ::_pb::Map<std::string, ::hashdb::v1::FeList>;
    using WireHelper = LoadDBRequest_InputDbEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_input_db();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.LoadDBRequest.input_db");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool persistent = 2;
  if (this->_internal_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.LoadDBRequest)
  return target;
}

::size_t LoadDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.LoadDBRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .hashdb.v1.FeList> input_db = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hashdb::v1::FeList >::const_iterator
      it = this->_internal_input_db().begin();
      it != this->_internal_input_db().end(); ++it) {
    total_size += LoadDBRequest_InputDbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool persistent = 2;
  if (this->_internal_persistent() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadDBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadDBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadDBRequest::GetClassData() const { return &_class_data_; }


void LoadDBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadDBRequest*>(&to_msg);
  auto& from = static_cast<const LoadDBRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.LoadDBRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_db_.MergeFrom(from._impl_.input_db_);
  if (from._internal_persistent() != 0) {
    _this->_internal_set_persistent(from._internal_persistent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadDBRequest::CopyFrom(const LoadDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.LoadDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDBRequest::IsInitialized() const {
  return true;
}

void LoadDBRequest::InternalSwap(LoadDBRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_db_.InternalSwap(&other->_impl_.input_db_);

  swap(_impl_.persistent_, other->_impl_.persistent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadDBRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[6]);
}
// ===================================================================

LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse() {}
LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::MergeFrom(const LoadProgramDBRequest_InputProgramDbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[7]);
}
// ===================================================================

class LoadProgramDBRequest::_Internal {
 public:
};

LoadProgramDBRequest::LoadProgramDBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.LoadProgramDBRequest)
}
LoadProgramDBRequest::LoadProgramDBRequest(const LoadProgramDBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadProgramDBRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.input_program_db_)*/{}
    , decltype(_impl_.persistent_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.input_program_db_.MergeFrom(from._impl_.input_program_db_);
  _this->_impl_.persistent_ = from._impl_.persistent_;
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.LoadProgramDBRequest)
}

inline void LoadProgramDBRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.input_program_db_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.persistent_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoadProgramDBRequest::~LoadProgramDBRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.LoadProgramDBRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadProgramDBRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_program_db_.~MapField();
}

void LoadProgramDBRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadProgramDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.LoadProgramDBRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_program_db_.Clear();
  _impl_.persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadProgramDBRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> input_program_db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.input_program_db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool persistent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoadProgramDBRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.LoadProgramDBRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> input_program_db = 1;
  if (!this->_internal_input_program_db().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_input_program_db();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.LoadProgramDBRequest.input_program_db");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool persistent = 2;
  if (this->_internal_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.LoadProgramDBRequest)
  return target;
}

::size_t LoadProgramDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.LoadProgramDBRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> input_program_db = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_program_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_input_program_db().begin();
      it != this->_internal_input_program_db().end(); ++it) {
    total_size += LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool persistent = 2;
  if (this->_internal_persistent() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadProgramDBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadProgramDBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadProgramDBRequest::GetClassData() const { return &_class_data_; }


void LoadProgramDBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadProgramDBRequest*>(&to_msg);
  auto& from = static_cast<const LoadProgramDBRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.LoadProgramDBRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_program_db_.MergeFrom(from._impl_.input_program_db_);
  if (from._internal_persistent() != 0) {
    _this->_internal_set_persistent(from._internal_persistent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadProgramDBRequest::CopyFrom(const LoadProgramDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.LoadProgramDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadProgramDBRequest::IsInitialized() const {
  return true;
}

void LoadProgramDBRequest::InternalSwap(LoadProgramDBRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_program_db_.InternalSwap(&other->_impl_.input_program_db_);

  swap(_impl_.persistent_, other->_impl_.persistent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadProgramDBRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[8]);
}
// ===================================================================

class GetFlushDataRequest::_Internal {
 public:
};

GetFlushDataRequest::GetFlushDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetFlushDataRequest)
}
GetFlushDataRequest::GetFlushDataRequest(const GetFlushDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetFlushDataRequest)
}

inline void GetFlushDataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.flush_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushDataRequest::~GetFlushDataRequest() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetFlushDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushDataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetFlushDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetFlushDataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flush_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetFlushDataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetFlushDataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 flush_id = 1;
  if (this->_internal_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_flush_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetFlushDataRequest)
  return target;
}

::size_t GetFlushDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetFlushDataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 flush_id = 1;
  if (this->_internal_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_flush_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushDataRequest::GetClassData() const { return &_class_data_; }


void GetFlushDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushDataRequest*>(&to_msg);
  auto& from = static_cast<const GetFlushDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetFlushDataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flush_id() != 0) {
    _this->_internal_set_flush_id(from._internal_flush_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushDataRequest::CopyFrom(const GetFlushDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetFlushDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushDataRequest::IsInitialized() const {
  return true;
}

void GetFlushDataRequest::InternalSwap(GetFlushDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.flush_id_, other->_impl_.flush_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[9]);
}
// ===================================================================

SetResponse_SiblingsEntry_DoNotUse::SetResponse_SiblingsEntry_DoNotUse() {}
SetResponse_SiblingsEntry_DoNotUse::SetResponse_SiblingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetResponse_SiblingsEntry_DoNotUse::MergeFrom(const SetResponse_SiblingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetResponse_SiblingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[10]);
}
// ===================================================================

SetResponse_DbReadLogEntry_DoNotUse::SetResponse_DbReadLogEntry_DoNotUse() {}
SetResponse_DbReadLogEntry_DoNotUse::SetResponse_DbReadLogEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetResponse_DbReadLogEntry_DoNotUse::MergeFrom(const SetResponse_DbReadLogEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetResponse_DbReadLogEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[11]);
}
// ===================================================================

class SetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetResponse, _impl_._has_bits_);
  static const ::hashdb::v1::Fea& old_root(const SetResponse* msg);
  static void set_has_old_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hashdb::v1::Fea& new_root(const SetResponse* msg);
  static void set_has_new_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hashdb::v1::Fea& key(const SetResponse* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hashdb::v1::Fea& ins_key(const SetResponse* msg);
  static void set_has_ins_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hashdb::v1::ResultCode& result(const SetResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hashdb::v1::Fea&
SetResponse::_Internal::old_root(const SetResponse* msg) {
  return *msg->_impl_.old_root_;
}
const ::hashdb::v1::Fea&
SetResponse::_Internal::new_root(const SetResponse* msg) {
  return *msg->_impl_.new_root_;
}
const ::hashdb::v1::Fea&
SetResponse::_Internal::key(const SetResponse* msg) {
  return *msg->_impl_.key_;
}
const ::hashdb::v1::Fea&
SetResponse::_Internal::ins_key(const SetResponse* msg) {
  return *msg->_impl_.ins_key_;
}
const ::hashdb::v1::ResultCode&
SetResponse::_Internal::result(const SetResponse* msg) {
  return *msg->_impl_.result_;
}
SetResponse::SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.SetResponse)
}
SetResponse::SetResponse(const SetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.siblings_)*/{}
    , /*decltype(_impl_.db_read_log_)*/{}
    , decltype(_impl_.ins_value_) {}

    , decltype(_impl_.old_value_) {}

    , decltype(_impl_.new_value_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.old_root_){nullptr}
    , decltype(_impl_.new_root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.ins_key_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.proof_hash_counter_) {}

    , decltype(_impl_.is_old0_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.siblings_.MergeFrom(from._impl_.siblings_);
  _this->_impl_.db_read_log_.MergeFrom(from._impl_.db_read_log_);
  _impl_.ins_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ins_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ins_value().empty()) {
    _this->_impl_.ins_value_.Set(from._internal_ins_value(), _this->GetArenaForAllocation());
  }
  _impl_.old_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.old_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_value().empty()) {
    _this->_impl_.old_value_.Set(from._internal_old_value(), _this->GetArenaForAllocation());
  }
  _impl_.new_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_value().empty()) {
    _this->_impl_.new_value_.Set(from._internal_new_value(), _this->GetArenaForAllocation());
  }
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.old_root_ = new ::hashdb::v1::Fea(*from._impl_.old_root_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.new_root_ = new ::hashdb::v1::Fea(*from._impl_.new_root_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.key_ = new ::hashdb::v1::Fea(*from._impl_.key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.ins_key_ = new ::hashdb::v1::Fea(*from._impl_.ins_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.result_ = new ::hashdb::v1::ResultCode(*from._impl_.result_);
  }
  ::memcpy(&_impl_.proof_hash_counter_, &from._impl_.proof_hash_counter_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_old0_) -
    reinterpret_cast<char*>(&_impl_.proof_hash_counter_)) + sizeof(_impl_.is_old0_));
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.SetResponse)
}

inline void SetResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.siblings_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.db_read_log_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.ins_value_) {}

    , decltype(_impl_.old_value_) {}

    , decltype(_impl_.new_value_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.old_root_){nullptr}
    , decltype(_impl_.new_root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.ins_key_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.proof_hash_counter_) { ::uint64_t{0u} }

    , decltype(_impl_.is_old0_) { false }

  };
  _impl_.ins_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ins_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.old_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetResponse::~SetResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.SetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.siblings_.~MapField();
  _impl_.db_read_log_.~MapField();
  _impl_.ins_value_.Destroy();
  _impl_.old_value_.Destroy();
  _impl_.new_value_.Destroy();
  _impl_.mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.old_root_;
  if (this != internal_default_instance()) delete _impl_.new_root_;
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.ins_key_;
  if (this != internal_default_instance()) delete _impl_.result_;
}

void SetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.SetResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.siblings_.Clear();
  _impl_.db_read_log_.Clear();
  _impl_.ins_value_.ClearToEmpty();
  _impl_.old_value_.ClearToEmpty();
  _impl_.new_value_.ClearToEmpty();
  _impl_.mode_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.old_root_ != nullptr);
      _impl_.old_root_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.new_root_ != nullptr);
      _impl_.new_root_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.ins_key_ != nullptr);
      _impl_.ins_key_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
  }
  ::memset(&_impl_.proof_hash_counter_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_old0_) -
      reinterpret_cast<char*>(&_impl_.proof_hash_counter_)) + sizeof(_impl_.is_old0_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.Fea old_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea new_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint64, .hashdb.v1.SiblingList> siblings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.siblings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea ins_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ins_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ins_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ins_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.SetResponse.ins_value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_old0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.is_old0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string old_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_old_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.SetResponse.old_value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_new_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.SetResponse.new_value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.SetResponse.mode"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 proof_hash_counter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.proof_hash_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .hashdb.v1.FeList> db_read_log = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.db_read_log_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.ResultCode result = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.SetResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.Fea old_root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::old_root(this),
        _Internal::old_root(this).GetCachedSize(), target, stream);
  }

  // .hashdb.v1.Fea new_root = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_root(this),
        _Internal::new_root(this).GetCachedSize(), target, stream);
  }

  // .hashdb.v1.Fea key = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // map<uint64, .hashdb.v1.SiblingList> siblings = 4;
  if (!this->_internal_siblings().empty()) {
    using MapType = ::_pb::Map<::uint64_t, ::hashdb::v1::SiblingList>;
    using WireHelper = SetResponse_SiblingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_siblings();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // .hashdb.v1.Fea ins_key = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ins_key(this),
        _Internal::ins_key(this).GetCachedSize(), target, stream);
  }

  // string ins_value = 6;
  if (!this->_internal_ins_value().empty()) {
    const std::string& _s = this->_internal_ins_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.SetResponse.ins_value");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bool is_old0 = 7;
  if (this->_internal_is_old0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_old0(), target);
  }

  // string old_value = 8;
  if (!this->_internal_old_value().empty()) {
    const std::string& _s = this->_internal_old_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.SetResponse.old_value");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string new_value = 9;
  if (!this->_internal_new_value().empty()) {
    const std::string& _s = this->_internal_new_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.SetResponse.new_value");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string mode = 10;
  if (!this->_internal_mode().empty()) {
    const std::string& _s = this->_internal_mode();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.SetResponse.mode");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // uint64 proof_hash_counter = 11;
  if (this->_internal_proof_hash_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_proof_hash_counter(), target);
  }

  // map<string, .hashdb.v1.FeList> db_read_log = 12;
  if (!this->_internal_db_read_log().empty()) {
    using MapType = ::_pb::Map<std::string, ::hashdb::v1::FeList>;
    using WireHelper = SetResponse_DbReadLogEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_db_read_log();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.SetResponse.db_read_log");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .hashdb.v1.ResultCode result = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.SetResponse)
  return target;
}

::size_t SetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.SetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .hashdb.v1.SiblingList> siblings = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_siblings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::hashdb::v1::SiblingList >::const_iterator
      it = this->_internal_siblings().begin();
      it != this->_internal_siblings().end(); ++it) {
    total_size += SetResponse_SiblingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .hashdb.v1.FeList> db_read_log = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_read_log_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hashdb::v1::FeList >::const_iterator
      it = this->_internal_db_read_log().begin();
      it != this->_internal_db_read_log().end(); ++it) {
    total_size += SetResponse_DbReadLogEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ins_value = 6;
  if (!this->_internal_ins_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ins_value());
  }

  // string old_value = 8;
  if (!this->_internal_old_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_old_value());
  }

  // string new_value = 9;
  if (!this->_internal_new_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_value());
  }

  // string mode = 10;
  if (!this->_internal_mode().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mode());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .hashdb.v1.Fea old_root = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_root_);
    }

    // .hashdb.v1.Fea new_root = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_root_);
    }

    // .hashdb.v1.Fea key = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // .hashdb.v1.Fea ins_key = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ins_key_);
    }

    // .hashdb.v1.ResultCode result = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

  }
  // uint64 proof_hash_counter = 11;
  if (this->_internal_proof_hash_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proof_hash_counter());
  }

  // bool is_old0 = 7;
  if (this->_internal_is_old0() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetResponse::GetClassData() const { return &_class_data_; }


void SetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetResponse*>(&to_msg);
  auto& from = static_cast<const SetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.SetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.siblings_.MergeFrom(from._impl_.siblings_);
  _this->_impl_.db_read_log_.MergeFrom(from._impl_.db_read_log_);
  if (!from._internal_ins_value().empty()) {
    _this->_internal_set_ins_value(from._internal_ins_value());
  }
  if (!from._internal_old_value().empty()) {
    _this->_internal_set_old_value(from._internal_old_value());
  }
  if (!from._internal_new_value().empty()) {
    _this->_internal_set_new_value(from._internal_new_value());
  }
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_old_root()->::hashdb::v1::Fea::MergeFrom(
          from._internal_old_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_root()->::hashdb::v1::Fea::MergeFrom(
          from._internal_new_root());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_key()->::hashdb::v1::Fea::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_ins_key()->::hashdb::v1::Fea::MergeFrom(
          from._internal_ins_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_result()->::hashdb::v1::ResultCode::MergeFrom(
          from._internal_result());
    }
  }
  if (from._internal_proof_hash_counter() != 0) {
    _this->_internal_set_proof_hash_counter(from._internal_proof_hash_counter());
  }
  if (from._internal_is_old0() != 0) {
    _this->_internal_set_is_old0(from._internal_is_old0());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetResponse::CopyFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResponse::IsInitialized() const {
  return true;
}

void SetResponse::InternalSwap(SetResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.siblings_.InternalSwap(&other->_impl_.siblings_);
  _impl_.db_read_log_.InternalSwap(&other->_impl_.db_read_log_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ins_value_, lhs_arena,
                                       &other->_impl_.ins_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.old_value_, lhs_arena,
                                       &other->_impl_.old_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_value_, lhs_arena,
                                       &other->_impl_.new_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_, lhs_arena,
                                       &other->_impl_.mode_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResponse, _impl_.is_old0_)
      + sizeof(SetResponse::_impl_.is_old0_)
      - PROTOBUF_FIELD_OFFSET(SetResponse, _impl_.old_root_)>(
          reinterpret_cast<char*>(&_impl_.old_root_),
          reinterpret_cast<char*>(&other->_impl_.old_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[12]);
}
// ===================================================================

GetResponse_SiblingsEntry_DoNotUse::GetResponse_SiblingsEntry_DoNotUse() {}
GetResponse_SiblingsEntry_DoNotUse::GetResponse_SiblingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetResponse_SiblingsEntry_DoNotUse::MergeFrom(const GetResponse_SiblingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetResponse_SiblingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[13]);
}
// ===================================================================

GetResponse_DbReadLogEntry_DoNotUse::GetResponse_DbReadLogEntry_DoNotUse() {}
GetResponse_DbReadLogEntry_DoNotUse::GetResponse_DbReadLogEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetResponse_DbReadLogEntry_DoNotUse::MergeFrom(const GetResponse_DbReadLogEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetResponse_DbReadLogEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[14]);
}
// ===================================================================

class GetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetResponse, _impl_._has_bits_);
  static const ::hashdb::v1::Fea& root(const GetResponse* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hashdb::v1::Fea& key(const GetResponse* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hashdb::v1::Fea& ins_key(const GetResponse* msg);
  static void set_has_ins_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hashdb::v1::ResultCode& result(const GetResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hashdb::v1::Fea&
GetResponse::_Internal::root(const GetResponse* msg) {
  return *msg->_impl_.root_;
}
const ::hashdb::v1::Fea&
GetResponse::_Internal::key(const GetResponse* msg) {
  return *msg->_impl_.key_;
}
const ::hashdb::v1::Fea&
GetResponse::_Internal::ins_key(const GetResponse* msg) {
  return *msg->_impl_.ins_key_;
}
const ::hashdb::v1::ResultCode&
GetResponse::_Internal::result(const GetResponse* msg) {
  return *msg->_impl_.result_;
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.siblings_)*/{}
    , /*decltype(_impl_.db_read_log_)*/{}
    , decltype(_impl_.ins_value_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.ins_key_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.proof_hash_counter_) {}

    , decltype(_impl_.is_old0_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.siblings_.MergeFrom(from._impl_.siblings_);
  _this->_impl_.db_read_log_.MergeFrom(from._impl_.db_read_log_);
  _impl_.ins_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ins_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ins_value().empty()) {
    _this->_impl_.ins_value_.Set(from._internal_ins_value(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.root_ = new ::hashdb::v1::Fea(*from._impl_.root_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.key_ = new ::hashdb::v1::Fea(*from._impl_.key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ins_key_ = new ::hashdb::v1::Fea(*from._impl_.ins_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.result_ = new ::hashdb::v1::ResultCode(*from._impl_.result_);
  }
  ::memcpy(&_impl_.proof_hash_counter_, &from._impl_.proof_hash_counter_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_old0_) -
    reinterpret_cast<char*>(&_impl_.proof_hash_counter_)) + sizeof(_impl_.is_old0_));
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetResponse)
}

inline void GetResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.siblings_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.db_read_log_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.ins_value_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.ins_key_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.proof_hash_counter_) { ::uint64_t{0u} }

    , decltype(_impl_.is_old0_) { false }

  };
  _impl_.ins_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ins_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.siblings_.~MapField();
  _impl_.db_read_log_.~MapField();
  _impl_.ins_value_.Destroy();
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.root_;
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.ins_key_;
  if (this != internal_default_instance()) delete _impl_.result_;
}

void GetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.siblings_.Clear();
  _impl_.db_read_log_.Clear();
  _impl_.ins_value_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.root_ != nullptr);
      _impl_.root_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ins_key_ != nullptr);
      _impl_.ins_key_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
  }
  ::memset(&_impl_.proof_hash_counter_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_old0_) -
      reinterpret_cast<char*>(&_impl_.proof_hash_counter_)) + sizeof(_impl_.is_old0_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.Fea root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint64, .hashdb.v1.SiblingList> siblings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.siblings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.Fea ins_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ins_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ins_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ins_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.GetResponse.ins_value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_old0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.is_old0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.GetResponse.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 proof_hash_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.proof_hash_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .hashdb.v1.FeList> db_read_log = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.db_read_log_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.ResultCode result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.Fea root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  // .hashdb.v1.Fea key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // map<uint64, .hashdb.v1.SiblingList> siblings = 3;
  if (!this->_internal_siblings().empty()) {
    using MapType = ::_pb::Map<::uint64_t, ::hashdb::v1::SiblingList>;
    using WireHelper = GetResponse_SiblingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_siblings();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // .hashdb.v1.Fea ins_key = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ins_key(this),
        _Internal::ins_key(this).GetCachedSize(), target, stream);
  }

  // string ins_value = 5;
  if (!this->_internal_ins_value().empty()) {
    const std::string& _s = this->_internal_ins_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetResponse.ins_value");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bool is_old0 = 6;
  if (this->_internal_is_old0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_old0(), target);
  }

  // string value = 7;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetResponse.value");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // uint64 proof_hash_counter = 8;
  if (this->_internal_proof_hash_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_proof_hash_counter(), target);
  }

  // map<string, .hashdb.v1.FeList> db_read_log = 9;
  if (!this->_internal_db_read_log().empty()) {
    using MapType = ::_pb::Map<std::string, ::hashdb::v1::FeList>;
    using WireHelper = GetResponse_DbReadLogEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_db_read_log();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetResponse.db_read_log");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .hashdb.v1.ResultCode result = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetResponse)
  return target;
}

::size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .hashdb.v1.SiblingList> siblings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_siblings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::hashdb::v1::SiblingList >::const_iterator
      it = this->_internal_siblings().begin();
      it != this->_internal_siblings().end(); ++it) {
    total_size += GetResponse_SiblingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .hashdb.v1.FeList> db_read_log = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_read_log_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hashdb::v1::FeList >::const_iterator
      it = this->_internal_db_read_log().begin();
      it != this->_internal_db_read_log().end(); ++it) {
    total_size += GetResponse_DbReadLogEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ins_value = 5;
  if (!this->_internal_ins_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ins_value());
  }

  // string value = 7;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .hashdb.v1.Fea root = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.root_);
    }

    // .hashdb.v1.Fea key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // .hashdb.v1.Fea ins_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ins_key_);
    }

    // .hashdb.v1.ResultCode result = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

  }
  // uint64 proof_hash_counter = 8;
  if (this->_internal_proof_hash_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proof_hash_counter());
  }

  // bool is_old0 = 6;
  if (this->_internal_is_old0() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }


void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetResponse*>(&to_msg);
  auto& from = static_cast<const GetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.siblings_.MergeFrom(from._impl_.siblings_);
  _this->_impl_.db_read_log_.MergeFrom(from._impl_.db_read_log_);
  if (!from._internal_ins_value().empty()) {
    _this->_internal_set_ins_value(from._internal_ins_value());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_root()->::hashdb::v1::Fea::MergeFrom(
          from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key()->::hashdb::v1::Fea::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ins_key()->::hashdb::v1::Fea::MergeFrom(
          from._internal_ins_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_result()->::hashdb::v1::ResultCode::MergeFrom(
          from._internal_result());
    }
  }
  if (from._internal_proof_hash_counter() != 0) {
    _this->_internal_set_proof_hash_counter(from._internal_proof_hash_counter());
  }
  if (from._internal_is_old0() != 0) {
    _this->_internal_set_is_old0(from._internal_is_old0());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.siblings_.InternalSwap(&other->_impl_.siblings_);
  _impl_.db_read_log_.InternalSwap(&other->_impl_.db_read_log_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ins_value_, lhs_arena,
                                       &other->_impl_.ins_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetResponse, _impl_.is_old0_)
      + sizeof(GetResponse::_impl_.is_old0_)
      - PROTOBUF_FIELD_OFFSET(GetResponse, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[15]);
}
// ===================================================================

class SetProgramResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetProgramResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetProgramResponse, _impl_._has_bits_);
  static const ::hashdb::v1::ResultCode& result(const SetProgramResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hashdb::v1::ResultCode&
SetProgramResponse::_Internal::result(const SetProgramResponse* msg) {
  return *msg->_impl_.result_;
}
SetProgramResponse::SetProgramResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.SetProgramResponse)
}
SetProgramResponse::SetProgramResponse(const SetProgramResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetProgramResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.result_ = new ::hashdb::v1::ResultCode(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.SetProgramResponse)
}

inline void SetProgramResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
  };
}

SetProgramResponse::~SetProgramResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.SetProgramResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetProgramResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void SetProgramResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetProgramResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.SetProgramResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProgramResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetProgramResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.SetProgramResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.ResultCode result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.SetProgramResponse)
  return target;
}

::size_t SetProgramResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.SetProgramResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hashdb.v1.ResultCode result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProgramResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetProgramResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProgramResponse::GetClassData() const { return &_class_data_; }


void SetProgramResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetProgramResponse*>(&to_msg);
  auto& from = static_cast<const SetProgramResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.SetProgramResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result()->::hashdb::v1::ResultCode::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProgramResponse::CopyFrom(const SetProgramResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.SetProgramResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProgramResponse::IsInitialized() const {
  return true;
}

void SetProgramResponse::InternalSwap(SetProgramResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProgramResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[16]);
}
// ===================================================================

class GetProgramResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProgramResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetProgramResponse, _impl_._has_bits_);
  static const ::hashdb::v1::ResultCode& result(const GetProgramResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hashdb::v1::ResultCode&
GetProgramResponse::_Internal::result(const GetProgramResponse* msg) {
  return *msg->_impl_.result_;
}
GetProgramResponse::GetProgramResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetProgramResponse)
}
GetProgramResponse::GetProgramResponse(const GetProgramResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetProgramResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.result_ = new ::hashdb::v1::ResultCode(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetProgramResponse)
}

inline void GetProgramResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.result_){nullptr}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetProgramResponse::~GetProgramResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetProgramResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetProgramResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void GetProgramResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetProgramResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetProgramResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProgramResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetProgramResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetProgramResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.ResultCode result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetProgramResponse)
  return target;
}

::size_t GetProgramResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetProgramResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .hashdb.v1.ResultCode result = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProgramResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetProgramResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProgramResponse::GetClassData() const { return &_class_data_; }


void GetProgramResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetProgramResponse*>(&to_msg);
  auto& from = static_cast<const GetProgramResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetProgramResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result()->::hashdb::v1::ResultCode::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProgramResponse::CopyFrom(const GetProgramResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetProgramResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgramResponse::IsInitialized() const {
  return true;
}

void GetProgramResponse::InternalSwap(GetProgramResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProgramResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[17]);
}
// ===================================================================

class FlushResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FlushResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_._has_bits_);
  static const ::hashdb::v1::ResultCode& result(const FlushResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hashdb::v1::ResultCode&
FlushResponse::_Internal::result(const FlushResponse* msg) {
  return *msg->_impl_.result_;
}
FlushResponse::FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.FlushResponse)
}
FlushResponse::FlushResponse(const FlushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.flush_id_) {}

    , decltype(_impl_.stored_flush_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.result_ = new ::hashdb::v1::ResultCode(*from._impl_.result_);
  }
  ::memcpy(&_impl_.flush_id_, &from._impl_.flush_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.stored_flush_id_) -
    reinterpret_cast<char*>(&_impl_.flush_id_)) + sizeof(_impl_.stored_flush_id_));
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.FlushResponse)
}

inline void FlushResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.flush_id_) { ::uint64_t{0u} }

    , decltype(_impl_.stored_flush_id_) { ::uint64_t{0u} }

  };
}

FlushResponse::~FlushResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.FlushResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void FlushResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.FlushResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  ::memset(&_impl_.flush_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.stored_flush_id_) -
      reinterpret_cast<char*>(&_impl_.flush_id_)) + sizeof(_impl_.stored_flush_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 stored_flush_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.ResultCode result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlushResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.FlushResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 flush_id = 1;
  if (this->_internal_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_flush_id(), target);
  }

  // uint64 stored_flush_id = 2;
  if (this->_internal_stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_stored_flush_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.ResultCode result = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.FlushResponse)
  return target;
}

::size_t FlushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.FlushResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hashdb.v1.ResultCode result = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // uint64 flush_id = 1;
  if (this->_internal_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_flush_id());
  }

  // uint64 stored_flush_id = 2;
  if (this->_internal_stored_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_stored_flush_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushResponse::GetClassData() const { return &_class_data_; }


void FlushResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushResponse*>(&to_msg);
  auto& from = static_cast<const FlushResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.FlushResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result()->::hashdb::v1::ResultCode::MergeFrom(
        from._internal_result());
  }
  if (from._internal_flush_id() != 0) {
    _this->_internal_set_flush_id(from._internal_flush_id());
  }
  if (from._internal_stored_flush_id() != 0) {
    _this->_internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushResponse::CopyFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushResponse::IsInitialized() const {
  return true;
}

void FlushResponse::InternalSwap(FlushResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_.stored_flush_id_)
      + sizeof(FlushResponse::_impl_.stored_flush_id_)
      - PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[18]);
}
// ===================================================================

class GetFlushStatusResponse::_Internal {
 public:
};

GetFlushStatusResponse::GetFlushStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetFlushStatusResponse)
}
GetFlushStatusResponse::GetFlushStatusResponse(const GetFlushStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prover_id_) {}

    , decltype(_impl_.stored_flush_id_) {}

    , decltype(_impl_.storing_flush_id_) {}

    , decltype(_impl_.last_flush_id_) {}

    , decltype(_impl_.pending_to_flush_nodes_) {}

    , decltype(_impl_.pending_to_flush_program_) {}

    , decltype(_impl_.storing_nodes_) {}

    , decltype(_impl_.storing_program_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prover_id().empty()) {
    _this->_impl_.prover_id_.Set(from._internal_prover_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stored_flush_id_, &from._impl_.stored_flush_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.storing_program_) -
    reinterpret_cast<char*>(&_impl_.stored_flush_id_)) + sizeof(_impl_.storing_program_));
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetFlushStatusResponse)
}

inline void GetFlushStatusResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.prover_id_) {}

    , decltype(_impl_.stored_flush_id_) { ::uint64_t{0u} }

    , decltype(_impl_.storing_flush_id_) { ::uint64_t{0u} }

    , decltype(_impl_.last_flush_id_) { ::uint64_t{0u} }

    , decltype(_impl_.pending_to_flush_nodes_) { ::uint64_t{0u} }

    , decltype(_impl_.pending_to_flush_program_) { ::uint64_t{0u} }

    , decltype(_impl_.storing_nodes_) { ::uint64_t{0u} }

    , decltype(_impl_.storing_program_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFlushStatusResponse::~GetFlushStatusResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetFlushStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prover_id_.Destroy();
}

void GetFlushStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetFlushStatusResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prover_id_.ClearToEmpty();
  ::memset(&_impl_.stored_flush_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.storing_program_) -
      reinterpret_cast<char*>(&_impl_.stored_flush_id_)) + sizeof(_impl_.storing_program_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stored_flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 storing_flush_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.storing_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_flush_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.last_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 pending_to_flush_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.pending_to_flush_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 pending_to_flush_program = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.pending_to_flush_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 storing_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.storing_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 storing_program = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.storing_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string prover_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.GetFlushStatusResponse.prover_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetFlushStatusResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetFlushStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stored_flush_id = 1;
  if (this->_internal_stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_stored_flush_id(), target);
  }

  // uint64 storing_flush_id = 2;
  if (this->_internal_storing_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_storing_flush_id(), target);
  }

  // uint64 last_flush_id = 3;
  if (this->_internal_last_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_last_flush_id(), target);
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->_internal_pending_to_flush_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_pending_to_flush_nodes(), target);
  }

  // uint64 pending_to_flush_program = 5;
  if (this->_internal_pending_to_flush_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_pending_to_flush_program(), target);
  }

  // uint64 storing_nodes = 6;
  if (this->_internal_storing_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_storing_nodes(), target);
  }

  // uint64 storing_program = 7;
  if (this->_internal_storing_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_storing_program(), target);
  }

  // string prover_id = 8;
  if (!this->_internal_prover_id().empty()) {
    const std::string& _s = this->_internal_prover_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetFlushStatusResponse.prover_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetFlushStatusResponse)
  return target;
}

::size_t GetFlushStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetFlushStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prover_id = 8;
  if (!this->_internal_prover_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_prover_id());
  }

  // uint64 stored_flush_id = 1;
  if (this->_internal_stored_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_stored_flush_id());
  }

  // uint64 storing_flush_id = 2;
  if (this->_internal_storing_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_storing_flush_id());
  }

  // uint64 last_flush_id = 3;
  if (this->_internal_last_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_flush_id());
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->_internal_pending_to_flush_nodes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_pending_to_flush_nodes());
  }

  // uint64 pending_to_flush_program = 5;
  if (this->_internal_pending_to_flush_program() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_pending_to_flush_program());
  }

  // uint64 storing_nodes = 6;
  if (this->_internal_storing_nodes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_storing_nodes());
  }

  // uint64 storing_program = 7;
  if (this->_internal_storing_program() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_storing_program());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushStatusResponse::GetClassData() const { return &_class_data_; }


void GetFlushStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetFlushStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetFlushStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prover_id().empty()) {
    _this->_internal_set_prover_id(from._internal_prover_id());
  }
  if (from._internal_stored_flush_id() != 0) {
    _this->_internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from._internal_storing_flush_id() != 0) {
    _this->_internal_set_storing_flush_id(from._internal_storing_flush_id());
  }
  if (from._internal_last_flush_id() != 0) {
    _this->_internal_set_last_flush_id(from._internal_last_flush_id());
  }
  if (from._internal_pending_to_flush_nodes() != 0) {
    _this->_internal_set_pending_to_flush_nodes(from._internal_pending_to_flush_nodes());
  }
  if (from._internal_pending_to_flush_program() != 0) {
    _this->_internal_set_pending_to_flush_program(from._internal_pending_to_flush_program());
  }
  if (from._internal_storing_nodes() != 0) {
    _this->_internal_set_storing_nodes(from._internal_storing_nodes());
  }
  if (from._internal_storing_program() != 0) {
    _this->_internal_set_storing_program(from._internal_storing_program());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushStatusResponse::CopyFrom(const GetFlushStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetFlushStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStatusResponse::IsInitialized() const {
  return true;
}

void GetFlushStatusResponse::InternalSwap(GetFlushStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prover_id_, lhs_arena,
                                       &other->_impl_.prover_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, _impl_.storing_program_)
      + sizeof(GetFlushStatusResponse::_impl_.storing_program_)
      - PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, _impl_.stored_flush_id_)>(
          reinterpret_cast<char*>(&_impl_.stored_flush_id_),
          reinterpret_cast<char*>(&other->_impl_.stored_flush_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[19]);
}
// ===================================================================

GetFlushDataResponse_NodesEntry_DoNotUse::GetFlushDataResponse_NodesEntry_DoNotUse() {}
GetFlushDataResponse_NodesEntry_DoNotUse::GetFlushDataResponse_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetFlushDataResponse_NodesEntry_DoNotUse::MergeFrom(const GetFlushDataResponse_NodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetFlushDataResponse_NodesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[20]);
}
// ===================================================================

GetFlushDataResponse_ProgramEntry_DoNotUse::GetFlushDataResponse_ProgramEntry_DoNotUse() {}
GetFlushDataResponse_ProgramEntry_DoNotUse::GetFlushDataResponse_ProgramEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetFlushDataResponse_ProgramEntry_DoNotUse::MergeFrom(const GetFlushDataResponse_ProgramEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetFlushDataResponse_ProgramEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[21]);
}
// ===================================================================

class GetFlushDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFlushDataResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetFlushDataResponse, _impl_._has_bits_);
  static const ::hashdb::v1::ResultCode& result(const GetFlushDataResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hashdb::v1::ResultCode&
GetFlushDataResponse::_Internal::result(const GetFlushDataResponse* msg) {
  return *msg->_impl_.result_;
}
GetFlushDataResponse::GetFlushDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.GetFlushDataResponse)
}
GetFlushDataResponse::GetFlushDataResponse(const GetFlushDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.nodes_)*/{}
    , /*decltype(_impl_.program_)*/{}
    , decltype(_impl_.nodes_state_root_) {}

    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.stored_flush_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.program_.MergeFrom(from._impl_.program_);
  _impl_.nodes_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nodes_state_root_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodes_state_root().empty()) {
    _this->_impl_.nodes_state_root_.Set(from._internal_nodes_state_root(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.result_ = new ::hashdb::v1::ResultCode(*from._impl_.result_);
  }
  _this->_impl_.stored_flush_id_ = from._impl_.stored_flush_id_;
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.GetFlushDataResponse)
}

inline void GetFlushDataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.nodes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.program_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.nodes_state_root_) {}

    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.stored_flush_id_) { ::uint64_t{0u} }

  };
  _impl_.nodes_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nodes_state_root_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFlushDataResponse::~GetFlushDataResponse() {
  // @@protoc_insertion_point(destructor:hashdb.v1.GetFlushDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushDataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~MapField();
  _impl_.program_.~MapField();
  _impl_.nodes_state_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void GetFlushDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.GetFlushDataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.program_.Clear();
  _impl_.nodes_state_root_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_.stored_flush_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stored_flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.nodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> program = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.program_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string nodes_state_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nodes_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hashdb.v1.GetFlushDataResponse.nodes_state_root"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .hashdb.v1.ResultCode result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetFlushDataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.GetFlushDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stored_flush_id = 1;
  if (this->_internal_stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_stored_flush_id(), target);
  }

  // map<string, string> nodes = 2;
  if (!this->_internal_nodes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GetFlushDataResponse_NodesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_nodes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetFlushDataResponse.nodes");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetFlushDataResponse.nodes");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> program = 3;
  if (!this->_internal_program().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GetFlushDataResponse_ProgramEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_program();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetFlushDataResponse.program");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetFlushDataResponse.program");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string nodes_state_root = 4;
  if (!this->_internal_nodes_state_root().empty()) {
    const std::string& _s = this->_internal_nodes_state_root();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "hashdb.v1.GetFlushDataResponse.nodes_state_root");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hashdb.v1.ResultCode result = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.GetFlushDataResponse)
  return target;
}

::size_t GetFlushDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.GetFlushDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> nodes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_nodes().begin();
      it != this->_internal_nodes().end(); ++it) {
    total_size += GetFlushDataResponse_NodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> program = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_program_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_program().begin();
      it != this->_internal_program().end(); ++it) {
    total_size += GetFlushDataResponse_ProgramEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string nodes_state_root = 4;
  if (!this->_internal_nodes_state_root().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_nodes_state_root());
  }

  // .hashdb.v1.ResultCode result = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // uint64 stored_flush_id = 1;
  if (this->_internal_stored_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_stored_flush_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushDataResponse::GetClassData() const { return &_class_data_; }


void GetFlushDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushDataResponse*>(&to_msg);
  auto& from = static_cast<const GetFlushDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.GetFlushDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.program_.MergeFrom(from._impl_.program_);
  if (!from._internal_nodes_state_root().empty()) {
    _this->_internal_set_nodes_state_root(from._internal_nodes_state_root());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result()->::hashdb::v1::ResultCode::MergeFrom(
        from._internal_result());
  }
  if (from._internal_stored_flush_id() != 0) {
    _this->_internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushDataResponse::CopyFrom(const GetFlushDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.GetFlushDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushDataResponse::IsInitialized() const {
  return true;
}

void GetFlushDataResponse::InternalSwap(GetFlushDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.program_.InternalSwap(&other->_impl_.program_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodes_state_root_, lhs_arena,
                                       &other->_impl_.nodes_state_root_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushDataResponse, _impl_.stored_flush_id_)
      + sizeof(GetFlushDataResponse::_impl_.stored_flush_id_)
      - PROTOBUF_FIELD_OFFSET(GetFlushDataResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[22]);
}
// ===================================================================

class Fea::_Internal {
 public:
};

Fea::Fea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.Fea)
}
Fea::Fea(const Fea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.Fea)
}

inline void Fea::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fe0_) { ::uint64_t{0u} }

    , decltype(_impl_.fe1_) { ::uint64_t{0u} }

    , decltype(_impl_.fe2_) { ::uint64_t{0u} }

    , decltype(_impl_.fe3_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Fea::~Fea() {
  // @@protoc_insertion_point(destructor:hashdb.v1.Fea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fea::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fea::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.Fea)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fe0_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fe3_) -
      reinterpret_cast<char*>(&_impl_.fe0_)) + sizeof(_impl_.fe3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 fe0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.fe0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 fe1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.fe1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 fe2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.fe2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 fe3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.fe3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Fea::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.Fea)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fe0 = 1;
  if (this->_internal_fe0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_fe0(), target);
  }

  // uint64 fe1 = 2;
  if (this->_internal_fe1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_fe1(), target);
  }

  // uint64 fe2 = 3;
  if (this->_internal_fe2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_fe2(), target);
  }

  // uint64 fe3 = 4;
  if (this->_internal_fe3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_fe3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.Fea)
  return target;
}

::size_t Fea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.Fea)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fe0 = 1;
  if (this->_internal_fe0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fe0());
  }

  // uint64 fe1 = 2;
  if (this->_internal_fe1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fe1());
  }

  // uint64 fe2 = 3;
  if (this->_internal_fe2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fe2());
  }

  // uint64 fe3 = 4;
  if (this->_internal_fe3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fe3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fea::GetClassData() const { return &_class_data_; }


void Fea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fea*>(&to_msg);
  auto& from = static_cast<const Fea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.Fea)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fe0() != 0) {
    _this->_internal_set_fe0(from._internal_fe0());
  }
  if (from._internal_fe1() != 0) {
    _this->_internal_set_fe1(from._internal_fe1());
  }
  if (from._internal_fe2() != 0) {
    _this->_internal_set_fe2(from._internal_fe2());
  }
  if (from._internal_fe3() != 0) {
    _this->_internal_set_fe3(from._internal_fe3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fea::CopyFrom(const Fea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.Fea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fea::IsInitialized() const {
  return true;
}

void Fea::InternalSwap(Fea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fea, _impl_.fe3_)
      + sizeof(Fea::_impl_.fe3_)
      - PROTOBUF_FIELD_OFFSET(Fea, _impl_.fe0_)>(
          reinterpret_cast<char*>(&_impl_.fe0_),
          reinterpret_cast<char*>(&other->_impl_.fe0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[23]);
}
// ===================================================================

class FeList::_Internal {
 public:
};

FeList::FeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.FeList)
}
FeList::FeList(const FeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fe_) { from._impl_.fe_ }
    ,/* _impl_._fe_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.FeList)
}

inline void FeList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fe_) { arena }
    ,/* _impl_._fe_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeList::~FeList() {
  // @@protoc_insertion_point(destructor:hashdb.v1.FeList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fe_.~RepeatedField();
}

void FeList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeList::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.FeList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fe()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 fe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_fe(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_fe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.FeList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 fe = 1;
  {
    int byte_size = _impl_._fe_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_fe(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.FeList)
  return target;
}

::size_t FeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.FeList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 fe = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fe())
    ;
    _impl_._fe_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeList::GetClassData() const { return &_class_data_; }


void FeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeList*>(&to_msg);
  auto& from = static_cast<const FeList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.FeList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fe_.MergeFrom(from._impl_.fe_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeList::CopyFrom(const FeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.FeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeList::IsInitialized() const {
  return true;
}

void FeList::InternalSwap(FeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fe_.InternalSwap(&other->_impl_.fe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[24]);
}
// ===================================================================

class SiblingList::_Internal {
 public:
};

SiblingList::SiblingList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.SiblingList)
}
SiblingList::SiblingList(const SiblingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiblingList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sibling_) { from._impl_.sibling_ }
    ,/* _impl_._sibling_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.SiblingList)
}

inline void SiblingList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sibling_) { arena }
    ,/* _impl_._sibling_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiblingList::~SiblingList() {
  // @@protoc_insertion_point(destructor:hashdb.v1.SiblingList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiblingList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sibling_.~RepeatedField();
}

void SiblingList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiblingList::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.SiblingList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sibling()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiblingList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 sibling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sibling(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_sibling(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiblingList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.SiblingList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sibling = 1;
  {
    int byte_size = _impl_._sibling_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_sibling(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.SiblingList)
  return target;
}

::size_t SiblingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.SiblingList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 sibling = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sibling())
    ;
    _impl_._sibling_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiblingList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiblingList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiblingList::GetClassData() const { return &_class_data_; }


void SiblingList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiblingList*>(&to_msg);
  auto& from = static_cast<const SiblingList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.SiblingList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sibling_.MergeFrom(from._impl_.sibling_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiblingList::CopyFrom(const SiblingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.SiblingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiblingList::IsInitialized() const {
  return true;
}

void SiblingList::InternalSwap(SiblingList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sibling_.InternalSwap(&other->_impl_.sibling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiblingList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[25]);
}
// ===================================================================

class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hashdb.v1.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hashdb.v1.ResultCode)
}

inline void ResultCode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:hashdb.v1.ResultCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultCode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResultCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:hashdb.v1.ResultCode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hashdb.v1.ResultCode.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::hashdb::v1::ResultCode_Code>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResultCode::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hashdb.v1.ResultCode)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hashdb.v1.ResultCode.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hashdb.v1.ResultCode)
  return target;
}

::size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hashdb.v1.ResultCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hashdb.v1.ResultCode.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultCode::GetClassData() const { return &_class_data_; }


void ResultCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResultCode*>(&to_msg);
  auto& from = static_cast<const ResultCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hashdb.v1.ResultCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hashdb.v1.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hashdb_2eproto_getter, &descriptor_table_hashdb_2eproto_once,
      file_level_metadata_hashdb_2eproto[26]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace hashdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hashdb::v1::Version*
Arena::CreateMaybeMessage< ::hashdb::v1::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SetRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::SetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SetProgramRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::SetProgramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SetProgramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetProgramRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::GetProgramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetProgramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::LoadDBRequest_InputDbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::LoadDBRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::LoadDBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::LoadDBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::LoadProgramDBRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::LoadProgramDBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::LoadProgramDBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetFlushDataRequest*
Arena::CreateMaybeMessage< ::hashdb::v1::GetFlushDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetFlushDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SetResponse_SiblingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SetResponse_DbReadLogEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SetResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::SetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetResponse_SiblingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetResponse_DbReadLogEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SetProgramResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::SetProgramResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SetProgramResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetProgramResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetProgramResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetProgramResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::FlushResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::FlushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::FlushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetFlushStatusResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetFlushStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetFlushStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetFlushDataResponse_NodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetFlushDataResponse_ProgramEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::GetFlushDataResponse*
Arena::CreateMaybeMessage< ::hashdb::v1::GetFlushDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::GetFlushDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::Fea*
Arena::CreateMaybeMessage< ::hashdb::v1::Fea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::Fea >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::FeList*
Arena::CreateMaybeMessage< ::hashdb::v1::FeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::FeList >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::SiblingList*
Arena::CreateMaybeMessage< ::hashdb::v1::SiblingList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::SiblingList >(arena);
}
template<> PROTOBUF_NOINLINE ::hashdb::v1::ResultCode*
Arena::CreateMaybeMessage< ::hashdb::v1::ResultCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hashdb::v1::ResultCode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datastream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datastream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datastream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datastream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datastream_2eproto;
namespace datastream {
namespace v1 {
class BatchEnd;
class BatchEndDefaultTypeInternal;
extern BatchEndDefaultTypeInternal _BatchEnd_default_instance_;
class BatchStart;
class BatchStartDefaultTypeInternal;
extern BatchStartDefaultTypeInternal _BatchStart_default_instance_;
class BookMark;
class BookMarkDefaultTypeInternal;
extern BookMarkDefaultTypeInternal _BookMark_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class L2Block;
class L2BlockDefaultTypeInternal;
extern L2BlockDefaultTypeInternal _L2Block_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class UpdateGER;
class UpdateGERDefaultTypeInternal;
extern UpdateGERDefaultTypeInternal _UpdateGER_default_instance_;
}  // namespace v1
}  // namespace datastream
PROTOBUF_NAMESPACE_OPEN
template<> ::datastream::v1::BatchEnd* Arena::CreateMaybeMessage<::datastream::v1::BatchEnd>(Arena*);
template<> ::datastream::v1::BatchStart* Arena::CreateMaybeMessage<::datastream::v1::BatchStart>(Arena*);
template<> ::datastream::v1::BookMark* Arena::CreateMaybeMessage<::datastream::v1::BookMark>(Arena*);
template<> ::datastream::v1::Debug* Arena::CreateMaybeMessage<::datastream::v1::Debug>(Arena*);
template<> ::datastream::v1::L2Block* Arena::CreateMaybeMessage<::datastream::v1::L2Block>(Arena*);
template<> ::datastream::v1::Transaction* Arena::CreateMaybeMessage<::datastream::v1::Transaction>(Arena*);
template<> ::datastream::v1::UpdateGER* Arena::CreateMaybeMessage<::datastream::v1::UpdateGER>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datastream {
namespace v1 {

enum BookmarkType : int {
  BOOKMARK_TYPE_UNSPECIFIED = 0,
  BOOKMARK_TYPE_BATCH = 1,
  BOOKMARK_TYPE_L2_BLOCK = 2,
  BookmarkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BookmarkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BookmarkType_IsValid(int value);
constexpr BookmarkType BookmarkType_MIN = BOOKMARK_TYPE_UNSPECIFIED;
constexpr BookmarkType BookmarkType_MAX = BOOKMARK_TYPE_L2_BLOCK;
constexpr int BookmarkType_ARRAYSIZE = BookmarkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookmarkType_descriptor();
template<typename T>
inline const std::string& BookmarkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BookmarkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BookmarkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BookmarkType_descriptor(), enum_t_value);
}
inline bool BookmarkType_Parse(
    const std::string& name, BookmarkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BookmarkType>(
    BookmarkType_descriptor(), name, value);
}
enum EntryType : int {
  ENTRY_TYPE_UNSPECIFIED = 0,
  ENTRY_TYPE_BATCH_START = 1,
  ENTRY_TYPE_L2_BLOCK = 2,
  ENTRY_TYPE_TRANSACTION = 3,
  ENTRY_TYPE_BATCH_END = 4,
  ENTRY_TYPE_UPDATE_GER = 5,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = ENTRY_TYPE_UNSPECIFIED;
constexpr EntryType EntryType_MAX = ENTRY_TYPE_UPDATE_GER;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    const std::string& name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum BatchType : int {
  BATCH_TYPE_UNSPECIFIED = 0,
  BATCH_TYPE_REGULAR = 1,
  BATCH_TYPE_FORCED = 2,
  BATCH_TYPE_INJECTED = 3,
  BatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BatchType_IsValid(int value);
constexpr BatchType BatchType_MIN = BATCH_TYPE_UNSPECIFIED;
constexpr BatchType BatchType_MAX = BATCH_TYPE_INJECTED;
constexpr int BatchType_ARRAYSIZE = BatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatchType_descriptor();
template<typename T>
inline const std::string& BatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatchType_descriptor(), enum_t_value);
}
inline bool BatchType_Parse(
    const std::string& name, BatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatchType>(
    BatchType_descriptor(), name, value);
}
// ===================================================================

class BatchStart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.BatchStart) */ {
 public:
  inline BatchStart() : BatchStart(nullptr) {};
  virtual ~BatchStart();

  BatchStart(const BatchStart& from);
  BatchStart(BatchStart&& from) noexcept
    : BatchStart() {
    *this = ::std::move(from);
  }

  inline BatchStart& operator=(const BatchStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchStart& operator=(BatchStart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchStart* internal_default_instance() {
    return reinterpret_cast<const BatchStart*>(
               &_BatchStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchStart& a, BatchStart& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchStart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchStart* New() const final {
    return CreateMaybeMessage<BatchStart>(nullptr);
  }

  BatchStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchStart& from);
  void MergeFrom(const BatchStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.BatchStart";
  }
  protected:
  explicit BatchStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugFieldNumber = 5,
    kNumberFieldNumber = 1,
    kForkIdFieldNumber = 3,
    kChainIdFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // .datastream.v1.Debug debug = 5;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fork_id = 3;
  void clear_fork_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 fork_id() const;
  void set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fork_id() const;
  void _internal_set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 chain_id = 4;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .datastream.v1.BatchType type = 2;
  void clear_type();
  ::datastream::v1::BatchType type() const;
  void set_type(::datastream::v1::BatchType value);
  private:
  ::datastream::v1::BatchType _internal_type() const;
  void _internal_set_type(::datastream::v1::BatchType value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.BatchStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::datastream::v1::Debug* debug_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fork_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chain_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class BatchEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.BatchEnd) */ {
 public:
  inline BatchEnd() : BatchEnd(nullptr) {};
  virtual ~BatchEnd();

  BatchEnd(const BatchEnd& from);
  BatchEnd(BatchEnd&& from) noexcept
    : BatchEnd() {
    *this = ::std::move(from);
  }

  inline BatchEnd& operator=(const BatchEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchEnd& operator=(BatchEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchEnd* internal_default_instance() {
    return reinterpret_cast<const BatchEnd*>(
               &_BatchEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchEnd& a, BatchEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchEnd* New() const final {
    return CreateMaybeMessage<BatchEnd>(nullptr);
  }

  BatchEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchEnd& from);
  void MergeFrom(const BatchEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.BatchEnd";
  }
  protected:
  explicit BatchEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalExitRootFieldNumber = 2,
    kStateRootFieldNumber = 3,
    kDebugFieldNumber = 4,
    kNumberFieldNumber = 1,
  };
  // bytes local_exit_root = 2;
  void clear_local_exit_root();
  const std::string& local_exit_root() const;
  void set_local_exit_root(const std::string& value);
  void set_local_exit_root(std::string&& value);
  void set_local_exit_root(const char* value);
  void set_local_exit_root(const void* value, size_t size);
  std::string* mutable_local_exit_root();
  std::string* release_local_exit_root();
  void set_allocated_local_exit_root(std::string* local_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_local_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_local_exit_root(
      std::string* local_exit_root);
  private:
  const std::string& _internal_local_exit_root() const;
  void _internal_set_local_exit_root(const std::string& value);
  std::string* _internal_mutable_local_exit_root();
  public:

  // bytes state_root = 3;
  void clear_state_root();
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const void* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state_root(
      std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // .datastream.v1.Debug debug = 4;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.BatchEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  ::datastream::v1::Debug* debug_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class L2Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.L2Block) */ {
 public:
  inline L2Block() : L2Block(nullptr) {};
  virtual ~L2Block();

  L2Block(const L2Block& from);
  L2Block(L2Block&& from) noexcept
    : L2Block() {
    *this = ::std::move(from);
  }

  inline L2Block& operator=(const L2Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2Block& operator=(L2Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const L2Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const L2Block* internal_default_instance() {
    return reinterpret_cast<const L2Block*>(
               &_L2Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(L2Block& a, L2Block& b) {
    a.Swap(&b);
  }
  inline void Swap(L2Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline L2Block* New() const final {
    return CreateMaybeMessage<L2Block>(nullptr);
  }

  L2Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<L2Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const L2Block& from);
  void MergeFrom(const L2Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.L2Block";
  }
  protected:
  explicit L2Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kL1BlockhashFieldNumber = 6,
    kHashFieldNumber = 8,
    kStateRootFieldNumber = 9,
    kGlobalExitRootFieldNumber = 10,
    kCoinbaseFieldNumber = 11,
    kBlockInfoRootFieldNumber = 13,
    kDebugFieldNumber = 14,
    kNumberFieldNumber = 1,
    kBatchNumberFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kMinTimestampFieldNumber = 5,
    kDeltaTimestampFieldNumber = 4,
    kL1InfotreeIndexFieldNumber = 7,
    kBlockGasLimitFieldNumber = 12,
  };
  // bytes l1_blockhash = 6;
  void clear_l1_blockhash();
  const std::string& l1_blockhash() const;
  void set_l1_blockhash(const std::string& value);
  void set_l1_blockhash(std::string&& value);
  void set_l1_blockhash(const char* value);
  void set_l1_blockhash(const void* value, size_t size);
  std::string* mutable_l1_blockhash();
  std::string* release_l1_blockhash();
  void set_allocated_l1_blockhash(std::string* l1_blockhash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_l1_blockhash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_l1_blockhash(
      std::string* l1_blockhash);
  private:
  const std::string& _internal_l1_blockhash() const;
  void _internal_set_l1_blockhash(const std::string& value);
  std::string* _internal_mutable_l1_blockhash();
  public:

  // bytes hash = 8;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hash(
      std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes state_root = 9;
  void clear_state_root();
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const void* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state_root(
      std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // bytes global_exit_root = 10;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  void set_global_exit_root(const std::string& value);
  void set_global_exit_root(std::string&& value);
  void set_global_exit_root(const char* value);
  void set_global_exit_root(const void* value, size_t size);
  std::string* mutable_global_exit_root();
  std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_exit_root(
      std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // bytes coinbase = 11;
  void clear_coinbase();
  const std::string& coinbase() const;
  void set_coinbase(const std::string& value);
  void set_coinbase(std::string&& value);
  void set_coinbase(const char* value);
  void set_coinbase(const void* value, size_t size);
  std::string* mutable_coinbase();
  std::string* release_coinbase();
  void set_allocated_coinbase(std::string* coinbase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_coinbase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_coinbase(
      std::string* coinbase);
  private:
  const std::string& _internal_coinbase() const;
  void _internal_set_coinbase(const std::string& value);
  std::string* _internal_mutable_coinbase();
  public:

  // bytes block_info_root = 13;
  void clear_block_info_root();
  const std::string& block_info_root() const;
  void set_block_info_root(const std::string& value);
  void set_block_info_root(std::string&& value);
  void set_block_info_root(const char* value);
  void set_block_info_root(const void* value, size_t size);
  std::string* mutable_block_info_root();
  std::string* release_block_info_root();
  void set_allocated_block_info_root(std::string* block_info_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_block_info_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_block_info_root(
      std::string* block_info_root);
  private:
  const std::string& _internal_block_info_root() const;
  void _internal_set_block_info_root(const std::string& value);
  std::string* _internal_mutable_block_info_root();
  public:

  // .datastream.v1.Debug debug = 14;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 batch_number = 2;
  void clear_batch_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_number() const;
  void set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batch_number() const;
  void _internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_timestamp = 5;
  void clear_min_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_timestamp() const;
  void set_min_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_timestamp() const;
  void _internal_set_min_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 delta_timestamp = 4;
  void clear_delta_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 delta_timestamp() const;
  void set_delta_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delta_timestamp() const;
  void _internal_set_delta_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 l1_infotree_index = 7;
  void clear_l1_infotree_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 l1_infotree_index() const;
  void set_l1_infotree_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l1_infotree_index() const;
  void _internal_set_l1_infotree_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 block_gas_limit = 12;
  void clear_block_gas_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_gas_limit() const;
  void set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_gas_limit() const;
  void _internal_set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.L2Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l1_blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coinbase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_info_root_;
  ::datastream::v1::Debug* debug_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delta_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l1_infotree_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_gas_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {};
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 4,
    kImStateRootFieldNumber = 6,
    kDebugFieldNumber = 7,
    kL2BlockNumberFieldNumber = 1,
    kIndexFieldNumber = 2,
    kIsValidFieldNumber = 3,
    kEffectiveGasPricePercentageFieldNumber = 5,
  };
  // bytes encoded = 4;
  void clear_encoded();
  const std::string& encoded() const;
  void set_encoded(const std::string& value);
  void set_encoded(std::string&& value);
  void set_encoded(const char* value);
  void set_encoded(const void* value, size_t size);
  std::string* mutable_encoded();
  std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encoded();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encoded(
      std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes im_state_root = 6;
  void clear_im_state_root();
  const std::string& im_state_root() const;
  void set_im_state_root(const std::string& value);
  void set_im_state_root(std::string&& value);
  void set_im_state_root(const char* value);
  void set_im_state_root(const void* value, size_t size);
  std::string* mutable_im_state_root();
  std::string* release_im_state_root();
  void set_allocated_im_state_root(std::string* im_state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_im_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_im_state_root(
      std::string* im_state_root);
  private:
  const std::string& _internal_im_state_root() const;
  void _internal_set_im_state_root(const std::string& value);
  std::string* _internal_mutable_im_state_root();
  public:

  // .datastream.v1.Debug debug = 7;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 l2block_number = 1;
  void clear_l2block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 l2block_number() const;
  void set_l2block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_l2block_number() const;
  void _internal_set_l2block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_valid = 3;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // uint32 effective_gas_price_percentage = 5;
  void clear_effective_gas_price_percentage();
  ::PROTOBUF_NAMESPACE_ID::uint32 effective_gas_price_percentage() const;
  void set_effective_gas_price_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_effective_gas_price_percentage() const;
  void _internal_set_effective_gas_price_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr im_state_root_;
  ::datastream::v1::Debug* debug_;
  ::PROTOBUF_NAMESPACE_ID::uint64 l2block_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  bool is_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 effective_gas_price_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class UpdateGER PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.UpdateGER) */ {
 public:
  inline UpdateGER() : UpdateGER(nullptr) {};
  virtual ~UpdateGER();

  UpdateGER(const UpdateGER& from);
  UpdateGER(UpdateGER&& from) noexcept
    : UpdateGER() {
    *this = ::std::move(from);
  }

  inline UpdateGER& operator=(const UpdateGER& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGER& operator=(UpdateGER&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGER* internal_default_instance() {
    return reinterpret_cast<const UpdateGER*>(
               &_UpdateGER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateGER& a, UpdateGER& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGER* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGER* New() const final {
    return CreateMaybeMessage<UpdateGER>(nullptr);
  }

  UpdateGER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGER& from);
  void MergeFrom(const UpdateGER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.UpdateGER";
  }
  protected:
  explicit UpdateGER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalExitRootFieldNumber = 3,
    kCoinbaseFieldNumber = 4,
    kStateRootFieldNumber = 7,
    kDebugFieldNumber = 8,
    kBatchNumberFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kForkIdFieldNumber = 5,
    kChainIdFieldNumber = 6,
  };
  // bytes global_exit_root = 3;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  void set_global_exit_root(const std::string& value);
  void set_global_exit_root(std::string&& value);
  void set_global_exit_root(const char* value);
  void set_global_exit_root(const void* value, size_t size);
  std::string* mutable_global_exit_root();
  std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_exit_root(
      std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // bytes coinbase = 4;
  void clear_coinbase();
  const std::string& coinbase() const;
  void set_coinbase(const std::string& value);
  void set_coinbase(std::string&& value);
  void set_coinbase(const char* value);
  void set_coinbase(const void* value, size_t size);
  std::string* mutable_coinbase();
  std::string* release_coinbase();
  void set_allocated_coinbase(std::string* coinbase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_coinbase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_coinbase(
      std::string* coinbase);
  private:
  const std::string& _internal_coinbase() const;
  void _internal_set_coinbase(const std::string& value);
  std::string* _internal_mutable_coinbase();
  public:

  // bytes state_root = 7;
  void clear_state_root();
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const void* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state_root(
      std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // .datastream.v1.Debug debug = 8;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 batch_number = 1;
  void clear_batch_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_number() const;
  void set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batch_number() const;
  void _internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fork_id = 5;
  void clear_fork_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 fork_id() const;
  void set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fork_id() const;
  void _internal_set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 chain_id = 6;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.UpdateGER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coinbase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  ::datastream::v1::Debug* debug_;
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fork_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class BookMark PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.BookMark) */ {
 public:
  inline BookMark() : BookMark(nullptr) {};
  virtual ~BookMark();

  BookMark(const BookMark& from);
  BookMark(BookMark&& from) noexcept
    : BookMark() {
    *this = ::std::move(from);
  }

  inline BookMark& operator=(const BookMark& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookMark& operator=(BookMark&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BookMark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookMark* internal_default_instance() {
    return reinterpret_cast<const BookMark*>(
               &_BookMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BookMark& a, BookMark& b) {
    a.Swap(&b);
  }
  inline void Swap(BookMark* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookMark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookMark* New() const final {
    return CreateMaybeMessage<BookMark>(nullptr);
  }

  BookMark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookMark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BookMark& from);
  void MergeFrom(const BookMark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookMark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.BookMark";
  }
  protected:
  explicit BookMark(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .datastream.v1.BookmarkType type = 1;
  void clear_type();
  ::datastream::v1::BookmarkType type() const;
  void set_type(::datastream::v1::BookmarkType value);
  private:
  ::datastream::v1::BookmarkType _internal_type() const;
  void _internal_set_type(::datastream::v1::BookmarkType value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.BookMark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class Debug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.Debug) */ {
 public:
  inline Debug() : Debug(nullptr) {};
  virtual ~Debug();

  Debug(const Debug& from);
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug& operator=(Debug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug* New() const final {
    return CreateMaybeMessage<Debug>(nullptr);
  }

  Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.Debug";
  }
  protected:
  explicit Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastream_2eproto);
    return ::descriptor_table_datastream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.Debug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchStart

// uint64 number = 1;
inline void BatchStart::clear_number() {
  number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchStart::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchStart::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.number)
  return _internal_number();
}
inline void BatchStart::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  number_ = value;
}
inline void BatchStart::set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.number)
}

// .datastream.v1.BatchType type = 2;
inline void BatchStart::clear_type() {
  type_ = 0;
}
inline ::datastream::v1::BatchType BatchStart::_internal_type() const {
  return static_cast< ::datastream::v1::BatchType >(type_);
}
inline ::datastream::v1::BatchType BatchStart::type() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.type)
  return _internal_type();
}
inline void BatchStart::_internal_set_type(::datastream::v1::BatchType value) {
  
  type_ = value;
}
inline void BatchStart::set_type(::datastream::v1::BatchType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.type)
}

// uint64 fork_id = 3;
inline void BatchStart::clear_fork_id() {
  fork_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchStart::_internal_fork_id() const {
  return fork_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchStart::fork_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.fork_id)
  return _internal_fork_id();
}
inline void BatchStart::_internal_set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fork_id_ = value;
}
inline void BatchStart::set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fork_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.fork_id)
}

// uint64 chain_id = 4;
inline void BatchStart::clear_chain_id() {
  chain_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchStart::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchStart::chain_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.chain_id)
  return _internal_chain_id();
}
inline void BatchStart::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chain_id_ = value;
}
inline void BatchStart::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.chain_id)
}

// .datastream.v1.Debug debug = 5;
inline bool BatchStart::_internal_has_debug() const {
  return this != internal_default_instance() && debug_ != nullptr;
}
inline bool BatchStart::has_debug() const {
  return _internal_has_debug();
}
inline void BatchStart::clear_debug() {
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
}
inline const ::datastream::v1::Debug& BatchStart::_internal_debug() const {
  const ::datastream::v1::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datastream::v1::Debug*>(
      &::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& BatchStart::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.debug)
  return _internal_debug();
}
inline void BatchStart::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.BatchStart.debug)
}
inline ::datastream::v1::Debug* BatchStart::release_debug() {
  auto temp = unsafe_arena_release_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datastream::v1::Debug* BatchStart::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchStart.debug)
  
  ::datastream::v1::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* BatchStart::_internal_mutable_debug() {
  
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArena());
    debug_ = p;
  }
  return debug_;
}
inline ::datastream::v1::Debug* BatchStart::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchStart.debug)
  return _internal_mutable_debug();
}
inline void BatchStart::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchStart.debug)
}

// -------------------------------------------------------------------

// BatchEnd

// uint64 number = 1;
inline void BatchEnd::clear_number() {
  number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchEnd::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchEnd::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.number)
  return _internal_number();
}
inline void BatchEnd::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  number_ = value;
}
inline void BatchEnd::set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchEnd.number)
}

// bytes local_exit_root = 2;
inline void BatchEnd::clear_local_exit_root() {
  local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BatchEnd::local_exit_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.local_exit_root)
  return _internal_local_exit_root();
}
inline void BatchEnd::set_local_exit_root(const std::string& value) {
  _internal_set_local_exit_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchEnd.local_exit_root)
}
inline std::string* BatchEnd::mutable_local_exit_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchEnd.local_exit_root)
  return _internal_mutable_local_exit_root();
}
inline const std::string& BatchEnd::_internal_local_exit_root() const {
  return local_exit_root_.Get();
}
inline void BatchEnd::_internal_set_local_exit_root(const std::string& value) {
  
  local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BatchEnd::set_local_exit_root(std::string&& value) {
  
  local_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.BatchEnd.local_exit_root)
}
inline void BatchEnd::set_local_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.BatchEnd.local_exit_root)
}
inline void BatchEnd::set_local_exit_root(const void* value,
    size_t size) {
  
  local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.BatchEnd.local_exit_root)
}
inline std::string* BatchEnd::_internal_mutable_local_exit_root() {
  
  return local_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BatchEnd::release_local_exit_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchEnd.local_exit_root)
  return local_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchEnd::set_allocated_local_exit_root(std::string* local_exit_root) {
  if (local_exit_root != nullptr) {
    
  } else {
    
  }
  local_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchEnd.local_exit_root)
}
inline std::string* BatchEnd::unsafe_arena_release_local_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.BatchEnd.local_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return local_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BatchEnd::unsafe_arena_set_allocated_local_exit_root(
    std::string* local_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (local_exit_root != nullptr) {
    
  } else {
    
  }
  local_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      local_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.BatchEnd.local_exit_root)
}

// bytes state_root = 3;
inline void BatchEnd::clear_state_root() {
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BatchEnd::state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.state_root)
  return _internal_state_root();
}
inline void BatchEnd::set_state_root(const std::string& value) {
  _internal_set_state_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchEnd.state_root)
}
inline std::string* BatchEnd::mutable_state_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchEnd.state_root)
  return _internal_mutable_state_root();
}
inline const std::string& BatchEnd::_internal_state_root() const {
  return state_root_.Get();
}
inline void BatchEnd::_internal_set_state_root(const std::string& value) {
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BatchEnd::set_state_root(std::string&& value) {
  
  state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.BatchEnd.state_root)
}
inline void BatchEnd::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.BatchEnd.state_root)
}
inline void BatchEnd::set_state_root(const void* value,
    size_t size) {
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.BatchEnd.state_root)
}
inline std::string* BatchEnd::_internal_mutable_state_root() {
  
  return state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BatchEnd::release_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchEnd.state_root)
  return state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchEnd::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchEnd.state_root)
}
inline std::string* BatchEnd::unsafe_arena_release_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.BatchEnd.state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BatchEnd::unsafe_arena_set_allocated_state_root(
    std::string* state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.BatchEnd.state_root)
}

// .datastream.v1.Debug debug = 4;
inline bool BatchEnd::_internal_has_debug() const {
  return this != internal_default_instance() && debug_ != nullptr;
}
inline bool BatchEnd::has_debug() const {
  return _internal_has_debug();
}
inline void BatchEnd::clear_debug() {
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
}
inline const ::datastream::v1::Debug& BatchEnd::_internal_debug() const {
  const ::datastream::v1::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datastream::v1::Debug*>(
      &::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& BatchEnd::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.debug)
  return _internal_debug();
}
inline void BatchEnd::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.BatchEnd.debug)
}
inline ::datastream::v1::Debug* BatchEnd::release_debug() {
  auto temp = unsafe_arena_release_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datastream::v1::Debug* BatchEnd::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchEnd.debug)
  
  ::datastream::v1::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* BatchEnd::_internal_mutable_debug() {
  
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArena());
    debug_ = p;
  }
  return debug_;
}
inline ::datastream::v1::Debug* BatchEnd::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchEnd.debug)
  return _internal_mutable_debug();
}
inline void BatchEnd::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchEnd.debug)
}

// -------------------------------------------------------------------

// L2Block

// uint64 number = 1;
inline void L2Block::clear_number() {
  number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.number)
  return _internal_number();
}
inline void L2Block::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  number_ = value;
}
inline void L2Block::set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.number)
}

// uint64 batch_number = 2;
inline void L2Block::clear_batch_number() {
  batch_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::_internal_batch_number() const {
  return batch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::batch_number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.batch_number)
  return _internal_batch_number();
}
inline void L2Block::_internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  batch_number_ = value;
}
inline void L2Block::set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_batch_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.batch_number)
}

// uint64 timestamp = 3;
inline void L2Block::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.timestamp)
  return _internal_timestamp();
}
inline void L2Block::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void L2Block::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.timestamp)
}

// uint32 delta_timestamp = 4;
inline void L2Block::clear_delta_timestamp() {
  delta_timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 L2Block::_internal_delta_timestamp() const {
  return delta_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 L2Block::delta_timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.delta_timestamp)
  return _internal_delta_timestamp();
}
inline void L2Block::_internal_set_delta_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  delta_timestamp_ = value;
}
inline void L2Block::set_delta_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delta_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.delta_timestamp)
}

// uint64 min_timestamp = 5;
inline void L2Block::clear_min_timestamp() {
  min_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::_internal_min_timestamp() const {
  return min_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::min_timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.min_timestamp)
  return _internal_min_timestamp();
}
inline void L2Block::_internal_set_min_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_timestamp_ = value;
}
inline void L2Block::set_min_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.min_timestamp)
}

// bytes l1_blockhash = 6;
inline void L2Block::clear_l1_blockhash() {
  l1_blockhash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& L2Block::l1_blockhash() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.l1_blockhash)
  return _internal_l1_blockhash();
}
inline void L2Block::set_l1_blockhash(const std::string& value) {
  _internal_set_l1_blockhash(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.l1_blockhash)
}
inline std::string* L2Block::mutable_l1_blockhash() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.l1_blockhash)
  return _internal_mutable_l1_blockhash();
}
inline const std::string& L2Block::_internal_l1_blockhash() const {
  return l1_blockhash_.Get();
}
inline void L2Block::_internal_set_l1_blockhash(const std::string& value) {
  
  l1_blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void L2Block::set_l1_blockhash(std::string&& value) {
  
  l1_blockhash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.L2Block.l1_blockhash)
}
inline void L2Block::set_l1_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  l1_blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.L2Block.l1_blockhash)
}
inline void L2Block::set_l1_blockhash(const void* value,
    size_t size) {
  
  l1_blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.L2Block.l1_blockhash)
}
inline std::string* L2Block::_internal_mutable_l1_blockhash() {
  
  return l1_blockhash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* L2Block::release_l1_blockhash() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.l1_blockhash)
  return l1_blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void L2Block::set_allocated_l1_blockhash(std::string* l1_blockhash) {
  if (l1_blockhash != nullptr) {
    
  } else {
    
  }
  l1_blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l1_blockhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.l1_blockhash)
}
inline std::string* L2Block::unsafe_arena_release_l1_blockhash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.L2Block.l1_blockhash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return l1_blockhash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void L2Block::unsafe_arena_set_allocated_l1_blockhash(
    std::string* l1_blockhash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (l1_blockhash != nullptr) {
    
  } else {
    
  }
  l1_blockhash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      l1_blockhash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.l1_blockhash)
}

// uint32 l1_infotree_index = 7;
inline void L2Block::clear_l1_infotree_index() {
  l1_infotree_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 L2Block::_internal_l1_infotree_index() const {
  return l1_infotree_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 L2Block::l1_infotree_index() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.l1_infotree_index)
  return _internal_l1_infotree_index();
}
inline void L2Block::_internal_set_l1_infotree_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l1_infotree_index_ = value;
}
inline void L2Block::set_l1_infotree_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l1_infotree_index(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.l1_infotree_index)
}

// bytes hash = 8;
inline void L2Block::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& L2Block::hash() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.hash)
  return _internal_hash();
}
inline void L2Block::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.hash)
}
inline std::string* L2Block::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.hash)
  return _internal_mutable_hash();
}
inline const std::string& L2Block::_internal_hash() const {
  return hash_.Get();
}
inline void L2Block::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void L2Block::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.L2Block.hash)
}
inline void L2Block::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.L2Block.hash)
}
inline void L2Block::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.L2Block.hash)
}
inline std::string* L2Block::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* L2Block::release_hash() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void L2Block::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.hash)
}
inline std::string* L2Block::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.L2Block.hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void L2Block::unsafe_arena_set_allocated_hash(
    std::string* hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.hash)
}

// bytes state_root = 9;
inline void L2Block::clear_state_root() {
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& L2Block::state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.state_root)
  return _internal_state_root();
}
inline void L2Block::set_state_root(const std::string& value) {
  _internal_set_state_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.state_root)
}
inline std::string* L2Block::mutable_state_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.state_root)
  return _internal_mutable_state_root();
}
inline const std::string& L2Block::_internal_state_root() const {
  return state_root_.Get();
}
inline void L2Block::_internal_set_state_root(const std::string& value) {
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void L2Block::set_state_root(std::string&& value) {
  
  state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.L2Block.state_root)
}
inline void L2Block::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.L2Block.state_root)
}
inline void L2Block::set_state_root(const void* value,
    size_t size) {
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.L2Block.state_root)
}
inline std::string* L2Block::_internal_mutable_state_root() {
  
  return state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* L2Block::release_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.state_root)
  return state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void L2Block::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.state_root)
}
inline std::string* L2Block::unsafe_arena_release_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.L2Block.state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void L2Block::unsafe_arena_set_allocated_state_root(
    std::string* state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.state_root)
}

// bytes global_exit_root = 10;
inline void L2Block::clear_global_exit_root() {
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& L2Block::global_exit_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.global_exit_root)
  return _internal_global_exit_root();
}
inline void L2Block::set_global_exit_root(const std::string& value) {
  _internal_set_global_exit_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.global_exit_root)
}
inline std::string* L2Block::mutable_global_exit_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.global_exit_root)
  return _internal_mutable_global_exit_root();
}
inline const std::string& L2Block::_internal_global_exit_root() const {
  return global_exit_root_.Get();
}
inline void L2Block::_internal_set_global_exit_root(const std::string& value) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void L2Block::set_global_exit_root(std::string&& value) {
  
  global_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.L2Block.global_exit_root)
}
inline void L2Block::set_global_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.L2Block.global_exit_root)
}
inline void L2Block::set_global_exit_root(const void* value,
    size_t size) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.L2Block.global_exit_root)
}
inline std::string* L2Block::_internal_mutable_global_exit_root() {
  
  return global_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* L2Block::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.global_exit_root)
  return global_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void L2Block::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.global_exit_root)
}
inline std::string* L2Block::unsafe_arena_release_global_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.L2Block.global_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void L2Block::unsafe_arena_set_allocated_global_exit_root(
    std::string* global_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.global_exit_root)
}

// bytes coinbase = 11;
inline void L2Block::clear_coinbase() {
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& L2Block::coinbase() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.coinbase)
  return _internal_coinbase();
}
inline void L2Block::set_coinbase(const std::string& value) {
  _internal_set_coinbase(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.coinbase)
}
inline std::string* L2Block::mutable_coinbase() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.coinbase)
  return _internal_mutable_coinbase();
}
inline const std::string& L2Block::_internal_coinbase() const {
  return coinbase_.Get();
}
inline void L2Block::_internal_set_coinbase(const std::string& value) {
  
  coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void L2Block::set_coinbase(std::string&& value) {
  
  coinbase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.L2Block.coinbase)
}
inline void L2Block::set_coinbase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.L2Block.coinbase)
}
inline void L2Block::set_coinbase(const void* value,
    size_t size) {
  
  coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.L2Block.coinbase)
}
inline std::string* L2Block::_internal_mutable_coinbase() {
  
  return coinbase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* L2Block::release_coinbase() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.coinbase)
  return coinbase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void L2Block::set_allocated_coinbase(std::string* coinbase) {
  if (coinbase != nullptr) {
    
  } else {
    
  }
  coinbase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coinbase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.coinbase)
}
inline std::string* L2Block::unsafe_arena_release_coinbase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.L2Block.coinbase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return coinbase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void L2Block::unsafe_arena_set_allocated_coinbase(
    std::string* coinbase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (coinbase != nullptr) {
    
  } else {
    
  }
  coinbase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      coinbase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.coinbase)
}

// uint64 block_gas_limit = 12;
inline void L2Block::clear_block_gas_limit() {
  block_gas_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::_internal_block_gas_limit() const {
  return block_gas_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 L2Block::block_gas_limit() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.block_gas_limit)
  return _internal_block_gas_limit();
}
inline void L2Block::_internal_set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_gas_limit_ = value;
}
inline void L2Block::set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_gas_limit(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.block_gas_limit)
}

// bytes block_info_root = 13;
inline void L2Block::clear_block_info_root() {
  block_info_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& L2Block::block_info_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.block_info_root)
  return _internal_block_info_root();
}
inline void L2Block::set_block_info_root(const std::string& value) {
  _internal_set_block_info_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.block_info_root)
}
inline std::string* L2Block::mutable_block_info_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.block_info_root)
  return _internal_mutable_block_info_root();
}
inline const std::string& L2Block::_internal_block_info_root() const {
  return block_info_root_.Get();
}
inline void L2Block::_internal_set_block_info_root(const std::string& value) {
  
  block_info_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void L2Block::set_block_info_root(std::string&& value) {
  
  block_info_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.L2Block.block_info_root)
}
inline void L2Block::set_block_info_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_info_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.L2Block.block_info_root)
}
inline void L2Block::set_block_info_root(const void* value,
    size_t size) {
  
  block_info_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.L2Block.block_info_root)
}
inline std::string* L2Block::_internal_mutable_block_info_root() {
  
  return block_info_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* L2Block::release_block_info_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.block_info_root)
  return block_info_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void L2Block::set_allocated_block_info_root(std::string* block_info_root) {
  if (block_info_root != nullptr) {
    
  } else {
    
  }
  block_info_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_info_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.block_info_root)
}
inline std::string* L2Block::unsafe_arena_release_block_info_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.L2Block.block_info_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return block_info_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void L2Block::unsafe_arena_set_allocated_block_info_root(
    std::string* block_info_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (block_info_root != nullptr) {
    
  } else {
    
  }
  block_info_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      block_info_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.block_info_root)
}

// .datastream.v1.Debug debug = 14;
inline bool L2Block::_internal_has_debug() const {
  return this != internal_default_instance() && debug_ != nullptr;
}
inline bool L2Block::has_debug() const {
  return _internal_has_debug();
}
inline void L2Block::clear_debug() {
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
}
inline const ::datastream::v1::Debug& L2Block::_internal_debug() const {
  const ::datastream::v1::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datastream::v1::Debug*>(
      &::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& L2Block::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.debug)
  return _internal_debug();
}
inline void L2Block::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.debug)
}
inline ::datastream::v1::Debug* L2Block::release_debug() {
  auto temp = unsafe_arena_release_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datastream::v1::Debug* L2Block::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.debug)
  
  ::datastream::v1::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* L2Block::_internal_mutable_debug() {
  
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArena());
    debug_ = p;
  }
  return debug_;
}
inline ::datastream::v1::Debug* L2Block::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.debug)
  return _internal_mutable_debug();
}
inline void L2Block::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.debug)
}

// -------------------------------------------------------------------

// Transaction

// uint64 l2block_number = 1;
inline void Transaction::clear_l2block_number() {
  l2block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_l2block_number() const {
  return l2block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::l2block_number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.l2block_number)
  return _internal_l2block_number();
}
inline void Transaction::_internal_set_l2block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  l2block_number_ = value;
}
inline void Transaction::set_l2block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_l2block_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.l2block_number)
}

// uint64 index = 2;
inline void Transaction::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::index() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.index)
  return _internal_index();
}
inline void Transaction::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void Transaction::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.index)
}

// bool is_valid = 3;
inline void Transaction::clear_is_valid() {
  is_valid_ = false;
}
inline bool Transaction::_internal_is_valid() const {
  return is_valid_;
}
inline bool Transaction::is_valid() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.is_valid)
  return _internal_is_valid();
}
inline void Transaction::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void Transaction::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.is_valid)
}

// bytes encoded = 4;
inline void Transaction::clear_encoded() {
  encoded_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::encoded() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.encoded)
  return _internal_encoded();
}
inline void Transaction::set_encoded(const std::string& value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.encoded)
}
inline std::string* Transaction::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.Transaction.encoded)
  return _internal_mutable_encoded();
}
inline const std::string& Transaction::_internal_encoded() const {
  return encoded_.Get();
}
inline void Transaction::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_encoded(std::string&& value) {
  
  encoded_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.Transaction.encoded)
}
inline void Transaction::set_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.Transaction.encoded)
}
inline void Transaction::set_encoded(const void* value,
    size_t size) {
  
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.Transaction.encoded)
}
inline std::string* Transaction::_internal_mutable_encoded() {
  
  return encoded_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_encoded() {
  // @@protoc_insertion_point(field_release:datastream.v1.Transaction.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Transaction.encoded)
}
inline std::string* Transaction::unsafe_arena_release_encoded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.Transaction.encoded)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encoded_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction::unsafe_arena_set_allocated_encoded(
    std::string* encoded) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encoded, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.Transaction.encoded)
}

// uint32 effective_gas_price_percentage = 5;
inline void Transaction::clear_effective_gas_price_percentage() {
  effective_gas_price_percentage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_effective_gas_price_percentage() const {
  return effective_gas_price_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::effective_gas_price_percentage() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.effective_gas_price_percentage)
  return _internal_effective_gas_price_percentage();
}
inline void Transaction::_internal_set_effective_gas_price_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  effective_gas_price_percentage_ = value;
}
inline void Transaction::set_effective_gas_price_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_effective_gas_price_percentage(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.effective_gas_price_percentage)
}

// bytes im_state_root = 6;
inline void Transaction::clear_im_state_root() {
  im_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::im_state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.im_state_root)
  return _internal_im_state_root();
}
inline void Transaction::set_im_state_root(const std::string& value) {
  _internal_set_im_state_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.im_state_root)
}
inline std::string* Transaction::mutable_im_state_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.Transaction.im_state_root)
  return _internal_mutable_im_state_root();
}
inline const std::string& Transaction::_internal_im_state_root() const {
  return im_state_root_.Get();
}
inline void Transaction::_internal_set_im_state_root(const std::string& value) {
  
  im_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_im_state_root(std::string&& value) {
  
  im_state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.Transaction.im_state_root)
}
inline void Transaction::set_im_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  im_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.Transaction.im_state_root)
}
inline void Transaction::set_im_state_root(const void* value,
    size_t size) {
  
  im_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.Transaction.im_state_root)
}
inline std::string* Transaction::_internal_mutable_im_state_root() {
  
  return im_state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_im_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.Transaction.im_state_root)
  return im_state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_im_state_root(std::string* im_state_root) {
  if (im_state_root != nullptr) {
    
  } else {
    
  }
  im_state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), im_state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Transaction.im_state_root)
}
inline std::string* Transaction::unsafe_arena_release_im_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.Transaction.im_state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return im_state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction::unsafe_arena_set_allocated_im_state_root(
    std::string* im_state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (im_state_root != nullptr) {
    
  } else {
    
  }
  im_state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      im_state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.Transaction.im_state_root)
}

// .datastream.v1.Debug debug = 7;
inline bool Transaction::_internal_has_debug() const {
  return this != internal_default_instance() && debug_ != nullptr;
}
inline bool Transaction::has_debug() const {
  return _internal_has_debug();
}
inline void Transaction::clear_debug() {
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
}
inline const ::datastream::v1::Debug& Transaction::_internal_debug() const {
  const ::datastream::v1::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datastream::v1::Debug*>(
      &::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& Transaction::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.debug)
  return _internal_debug();
}
inline void Transaction::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.Transaction.debug)
}
inline ::datastream::v1::Debug* Transaction::release_debug() {
  auto temp = unsafe_arena_release_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datastream::v1::Debug* Transaction::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.Transaction.debug)
  
  ::datastream::v1::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* Transaction::_internal_mutable_debug() {
  
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArena());
    debug_ = p;
  }
  return debug_;
}
inline ::datastream::v1::Debug* Transaction::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.Transaction.debug)
  return _internal_mutable_debug();
}
inline void Transaction::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Transaction.debug)
}

// -------------------------------------------------------------------

// UpdateGER

// uint64 batch_number = 1;
inline void UpdateGER::clear_batch_number() {
  batch_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::_internal_batch_number() const {
  return batch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::batch_number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.batch_number)
  return _internal_batch_number();
}
inline void UpdateGER::_internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  batch_number_ = value;
}
inline void UpdateGER::set_batch_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_batch_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.batch_number)
}

// uint64 timestamp = 2;
inline void UpdateGER::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.timestamp)
  return _internal_timestamp();
}
inline void UpdateGER::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void UpdateGER::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.timestamp)
}

// bytes global_exit_root = 3;
inline void UpdateGER::clear_global_exit_root() {
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateGER::global_exit_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.global_exit_root)
  return _internal_global_exit_root();
}
inline void UpdateGER::set_global_exit_root(const std::string& value) {
  _internal_set_global_exit_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.global_exit_root)
}
inline std::string* UpdateGER::mutable_global_exit_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.global_exit_root)
  return _internal_mutable_global_exit_root();
}
inline const std::string& UpdateGER::_internal_global_exit_root() const {
  return global_exit_root_.Get();
}
inline void UpdateGER::_internal_set_global_exit_root(const std::string& value) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateGER::set_global_exit_root(std::string&& value) {
  
  global_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.UpdateGER.global_exit_root)
}
inline void UpdateGER::set_global_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.UpdateGER.global_exit_root)
}
inline void UpdateGER::set_global_exit_root(const void* value,
    size_t size) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.UpdateGER.global_exit_root)
}
inline std::string* UpdateGER::_internal_mutable_global_exit_root() {
  
  return global_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateGER::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.global_exit_root)
  return global_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateGER::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.global_exit_root)
}
inline std::string* UpdateGER::unsafe_arena_release_global_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.UpdateGER.global_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateGER::unsafe_arena_set_allocated_global_exit_root(
    std::string* global_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.UpdateGER.global_exit_root)
}

// bytes coinbase = 4;
inline void UpdateGER::clear_coinbase() {
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateGER::coinbase() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.coinbase)
  return _internal_coinbase();
}
inline void UpdateGER::set_coinbase(const std::string& value) {
  _internal_set_coinbase(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.coinbase)
}
inline std::string* UpdateGER::mutable_coinbase() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.coinbase)
  return _internal_mutable_coinbase();
}
inline const std::string& UpdateGER::_internal_coinbase() const {
  return coinbase_.Get();
}
inline void UpdateGER::_internal_set_coinbase(const std::string& value) {
  
  coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateGER::set_coinbase(std::string&& value) {
  
  coinbase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.UpdateGER.coinbase)
}
inline void UpdateGER::set_coinbase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.UpdateGER.coinbase)
}
inline void UpdateGER::set_coinbase(const void* value,
    size_t size) {
  
  coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.UpdateGER.coinbase)
}
inline std::string* UpdateGER::_internal_mutable_coinbase() {
  
  return coinbase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateGER::release_coinbase() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.coinbase)
  return coinbase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateGER::set_allocated_coinbase(std::string* coinbase) {
  if (coinbase != nullptr) {
    
  } else {
    
  }
  coinbase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coinbase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.coinbase)
}
inline std::string* UpdateGER::unsafe_arena_release_coinbase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.UpdateGER.coinbase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return coinbase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateGER::unsafe_arena_set_allocated_coinbase(
    std::string* coinbase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (coinbase != nullptr) {
    
  } else {
    
  }
  coinbase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      coinbase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.UpdateGER.coinbase)
}

// uint64 fork_id = 5;
inline void UpdateGER::clear_fork_id() {
  fork_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::_internal_fork_id() const {
  return fork_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::fork_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.fork_id)
  return _internal_fork_id();
}
inline void UpdateGER::_internal_set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fork_id_ = value;
}
inline void UpdateGER::set_fork_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fork_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.fork_id)
}

// uint64 chain_id = 6;
inline void UpdateGER::clear_chain_id() {
  chain_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGER::chain_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.chain_id)
  return _internal_chain_id();
}
inline void UpdateGER::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chain_id_ = value;
}
inline void UpdateGER::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.chain_id)
}

// bytes state_root = 7;
inline void UpdateGER::clear_state_root() {
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateGER::state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.state_root)
  return _internal_state_root();
}
inline void UpdateGER::set_state_root(const std::string& value) {
  _internal_set_state_root(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.state_root)
}
inline std::string* UpdateGER::mutable_state_root() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.state_root)
  return _internal_mutable_state_root();
}
inline const std::string& UpdateGER::_internal_state_root() const {
  return state_root_.Get();
}
inline void UpdateGER::_internal_set_state_root(const std::string& value) {
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateGER::set_state_root(std::string&& value) {
  
  state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.UpdateGER.state_root)
}
inline void UpdateGER::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.UpdateGER.state_root)
}
inline void UpdateGER::set_state_root(const void* value,
    size_t size) {
  
  state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.UpdateGER.state_root)
}
inline std::string* UpdateGER::_internal_mutable_state_root() {
  
  return state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateGER::release_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.state_root)
  return state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateGER::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.state_root)
}
inline std::string* UpdateGER::unsafe_arena_release_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.UpdateGER.state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateGER::unsafe_arena_set_allocated_state_root(
    std::string* state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.UpdateGER.state_root)
}

// .datastream.v1.Debug debug = 8;
inline bool UpdateGER::_internal_has_debug() const {
  return this != internal_default_instance() && debug_ != nullptr;
}
inline bool UpdateGER::has_debug() const {
  return _internal_has_debug();
}
inline void UpdateGER::clear_debug() {
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
}
inline const ::datastream::v1::Debug& UpdateGER::_internal_debug() const {
  const ::datastream::v1::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datastream::v1::Debug*>(
      &::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& UpdateGER::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.debug)
  return _internal_debug();
}
inline void UpdateGER::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.UpdateGER.debug)
}
inline ::datastream::v1::Debug* UpdateGER::release_debug() {
  auto temp = unsafe_arena_release_debug();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datastream::v1::Debug* UpdateGER::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.debug)
  
  ::datastream::v1::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* UpdateGER::_internal_mutable_debug() {
  
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArena());
    debug_ = p;
  }
  return debug_;
}
inline ::datastream::v1::Debug* UpdateGER::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.debug)
  return _internal_mutable_debug();
}
inline void UpdateGER::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.debug)
}

// -------------------------------------------------------------------

// BookMark

// .datastream.v1.BookmarkType type = 1;
inline void BookMark::clear_type() {
  type_ = 0;
}
inline ::datastream::v1::BookmarkType BookMark::_internal_type() const {
  return static_cast< ::datastream::v1::BookmarkType >(type_);
}
inline ::datastream::v1::BookmarkType BookMark::type() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BookMark.type)
  return _internal_type();
}
inline void BookMark::_internal_set_type(::datastream::v1::BookmarkType value) {
  
  type_ = value;
}
inline void BookMark::set_type(::datastream::v1::BookmarkType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BookMark.type)
}

// uint64 value = 2;
inline void BookMark::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BookMark::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BookMark::value() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BookMark.value)
  return _internal_value();
}
inline void BookMark::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void BookMark::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BookMark.value)
}

// -------------------------------------------------------------------

// Debug

// string message = 1;
inline void Debug::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Debug::message() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Debug.message)
  return _internal_message();
}
inline void Debug::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Debug.message)
}
inline std::string* Debug::mutable_message() {
  // @@protoc_insertion_point(field_mutable:datastream.v1.Debug.message)
  return _internal_mutable_message();
}
inline const std::string& Debug::_internal_message() const {
  return message_.Get();
}
inline void Debug::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Debug::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datastream.v1.Debug.message)
}
inline void Debug::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datastream.v1.Debug.message)
}
inline void Debug::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datastream.v1.Debug.message)
}
inline std::string* Debug::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Debug::release_message() {
  // @@protoc_insertion_point(field_release:datastream.v1.Debug.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Debug::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Debug.message)
}
inline std::string* Debug::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datastream.v1.Debug.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Debug::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.Debug.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datastream

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::datastream::v1::BookmarkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::datastream::v1::BookmarkType>() {
  return ::datastream::v1::BookmarkType_descriptor();
}
template <> struct is_proto_enum< ::datastream::v1::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::datastream::v1::EntryType>() {
  return ::datastream::v1::EntryType_descriptor();
}
template <> struct is_proto_enum< ::datastream::v1::BatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::datastream::v1::BatchType>() {
  return ::datastream::v1::BatchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datastream_2eproto
